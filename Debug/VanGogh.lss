
AVRASM ver. 2.2.7  C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm Fri Dec 29 17:25:27 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.203\avrasm\inc\m1284pdef.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(53): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(54): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc(3): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(55): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(5): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(6): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(56): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.203\avrasm\inc\m1284pdef.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(53): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(54): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc(3): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(55): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(5): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(6): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(56): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
                                 
                                 ; Notes
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega1284P.xml *********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m1284Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega1284P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega1284P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M1284PDEF_INC_
                                 #define _M1284PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega1284P
                                 #pragma AVRPART ADMIN PART_NAME ATmega1284P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x05
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Timer/Counter3 Output Compare A Match Flag
                                 .equ	OCF3B	= 2	; Timer/Counter3 Output Compare B Match Flag
                                 .equ	ICF3	= 5	; Timer/Counter3 Input Capture Flag
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	WGM31	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	COM3B0	= 4	; Comparet Ouput Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode Bit 2
                                 .equ	WGM33	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for Channel A
                                 
                                 ; OCR3BH - Timer/Counter3 Output Compare Register B High Byte
                                 .equ	OCR3AH0	= 0	; Timer/Counter3 Output Compare Register High Byte bit 0
                                 .equ	OCR3AH1	= 1	; Timer/Counter3 Output Compare Register High Byte bit 1
                                 .equ	OCR3AH2	= 2	; Timer/Counter3 Output Compare Register High Byte bit 2
                                 .equ	OCR3AH3	= 3	; Timer/Counter3 Output Compare Register High Byte bit 3
                                 .equ	OCR3AH4	= 4	; Timer/Counter3 Output Compare Register High Byte bit 4
                                 .equ	OCR3AH5	= 5	; Timer/Counter3 Output Compare Register High Byte bit 5
                                 .equ	OCR3AH6	= 6	; Timer/Counter3 Output Compare Register High Byte bit 6
                                 .equ	OCR3AH7	= 7	; Timer/Counter3 Output Compare Register High Byte bit 7
                                 
                                 ; OCR3BL - Timer/Counter3 Output Compare Register B Low Byte
                                 .equ	OCR3AL0	= 0	; Timer/Counter3 Output Compare Register Low Byte Bit 0
                                 .equ	OCR3AL1	= 1	; Timer/Counter3 Output Compare Register Low Byte Bit 1
                                 .equ	OCR3AL2	= 2	; Timer/Counter3 Output Compare Register Low Byte Bit 2
                                 .equ	OCR3AL3	= 3	; Timer/Counter3 Output Compare Register Low Byte Bit 3
                                 .equ	OCR3AL4	= 4	; Timer/Counter3 Output Compare Register Low Byte Bit 4
                                 .equ	OCR3AL5	= 5	; Timer/Counter3 Output Compare Register Low Byte Bit 5
                                 .equ	OCR3AL6	= 6	; Timer/Counter3 Output Compare Register Low Byte Bit 6
                                 .equ	OCR3AL7	= 7	; Timer/Counter3 Output Compare Register Low Byte Bit 7
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 .equ	PCIE3	= 3	; Pin Change Interrupt Enable 3
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 .equ	PCIF3	= 3	; Pin Change Interrupt Flag 3
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0	; Pin Change Enable Mask 24
                                 .equ	PCINT25	= 1	; Pin Change Enable Mask 25
                                 .equ	PCINT26	= 2	; Pin Change Enable Mask 26
                                 .equ	PCINT27	= 3	; Pin Change Enable Mask 27
                                 .equ	PCINT28	= 4	; Pin Change Enable Mask 28
                                 .equ	PCINT29	= 5	; Pin Change Enable Mask 29
                                 .equ	PCINT30	= 6	; Pin Change Enable Mask 30
                                 .equ	PCINT31	= 7	; Pin Change Enable Mask 31
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 .equ	BODSE	= 5	; BOD Power Down in Sleep Enable
                                 .equ	BODS	= 6	; BOD Power Down in Sleep
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART 0
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4	; Power Reduction USART 1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRTIM3	= 0	; Power Reduction Timer/Counter3
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 16384
                                 .equ	RAMEND	= 0x40ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 16384
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	PCI0addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x000c	; Pin Change Interrupt Request 2
                                 .equ	PCI3addr	= 0x000e	; Pin Change Interrupt Request 3
                                 .equ	WDTaddr	= 0x0010	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x0012	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0014	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x0016	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0018	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x001a	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001c	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001e	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x0020	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x0022	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x0024	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0026	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0028	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x002a	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x002c	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	ADCCaddr	= 0x0030	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0032	; EEPROM Ready
                                 .equ	TWIaddr	= 0x0034	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0036	; Store Program Memory Read
                                 .equ	URXC1addr	= 0x0038	; USART1 RX complete
                                 .equ	UDRE1addr	= 0x003a	; USART1 Data Register Empty
                                 .equ	UTXC1addr	= 0x003c	; USART1 TX complete
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OVF3addr	= 0x0044	; Timer/Counter3 Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M1284PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Large Figlet font is "basic"
                                 ; Small Figlet font is "banner"
                                 
                                 .DEVICE ATmega1284P
                                 .CSEG
                                 .ORG 0x0000
000000 940c 0046                     jmp RESET_vect				; 0
000002 940c 07cd                     jmp INT0_vect				; 1
000004 940c 07eb                     jmp INT1_vect				; 2
000006 940c 07ed                     jmp INT2_vect				; 3
000008 940c 07ef                     jmp PCINT0_vect				; 4
00000a 940c 07f1                     jmp PCINT1_vect				; 5
00000c 940c 07f3                     jmp PCINT2_vect				; 6
00000e 940c 07f5                     jmp PCINT3_vect				; 7
000010 940c 07f7                     jmp WDT_vect				; 8
000012 940c 07f9                     jmp TIMER2_COMPA_vect		; 9
000014 940c 07fb                     jmp TIMER2_COMPB_vect		; 10
000016 940c 07fd                     jmp TIMER2_OVF_vect			; 11
000018 940c 07ff                     jmp TIMER1_CAPT_vect        ; 12
00001a 940c 01da                     jmp TIMER1_COMPA_vect		; 13
00001c 940c 0801                     jmp TIMER1_COMPB_vect		; 14
00001e 940c 0803                     jmp TIMER1_OVF_vect			; 15
000020 940c 0805                     jmp TIMER0_COMPA_vect		; 16
000022 940c 0807                     jmp TIMER0_COMPB_vect		; 17
000024 940c 0809                     jmp TIMER0_OVF_vect			; 18
000026 940c 080b                     jmp SPI_STC_vect			; 19
000028 940c 080d                     jmp USART0_RX_vect			; 20
00002a 940c 080f                     jmp USART0_UDRE_vect		; 21
00002c 940c 0811                     jmp USART0_TX_vect			; 22
00002e 940c 0813                     jmp ANALOG_COMP_vect		; 23
000030 940c 0815                     jmp ADC_vect				; 24
000032 940c 0817                     jmp EE_READY_vect			; 25
000034 940c 0819                     jmp TWI_vect				; 26
000036 940c 081b                     jmp SPM_READY_vect			; 27
000038 940c 081d                     jmp USART1_RX_vect			; 28
00003a 940c 081f                     jmp USART1_UDRE_vect		; 29
00003c 940c 0821                     jmp USART1_TX_vect			; 30
00003e 940c 0823                     jmp TIMER3_CAPT_vect		; 31
000040 940c 0825                     jmp TIMER3_COMPA_vect		; 32
000042 940c 0827                     jmp TIMER3_COMPB_vect		; 33
000044 940c 0829                     jmp TIMER3_OVF_vect			; 34
                                 
                                 RESET_vect:
000046 e400                          ldi r16, HIGH(RAMEND)
000047 bf0e                          out SPH, r16
000048 ef0f                          ldi r16, LOW(RAMEND)
000049 bf0d                          out SPL, r16
00004a 2411                          eor rZERO, rZERO
                                     ;sei
00004b 940c 00fc                     jmp main 
                                 
                                 #include "vangogh/constants.inc"
                                 
                                 #ifndef CONSTANTS_INC
                                 #define CONSTANTS_INC
                                 
                                 .EQU ADDRDDR   = DDRA
                                 .EQU ADDRPORT  = PORTA
                                 .EQU DATADDR   = DDRC
                                 .EQU DATAPORT  = PORTC
                                 .EQU CTRLDDR   = DDRD
                                 .EQU CTRLPORT  = PORTD
                                 .EQU CTL2DDR   = DDRB
                                 .EQU CTL2PORT  = PORTB
                                 
                                 .EQU STATBIT_DISP                =     7   ; Current line is a display line
                                 .EQU STATBIT_HSYNC               =     6   ; LOW indicates HSYNC active
                                 .EQU STATBIT_VSYNC               =     5   ; LOW indicates VSYNC active
                                 .EQU STATBIT_EVENFRAME           =     0   ; Current frame is an even frame
                                 .EQU STATBIT_DISP_MASK           = (0b10000000)
                                 .EQU STATBIT_EVENFRAME_MASK      = (0b00000001)
                                 .EQU NOT_STATBIT_DISP_MASK       = (0b01111111)
                                 .EQU NOT_STATBIT_EVENFRAME_MASK  = (0b11111110)
                                 
                                 ; === Bitmasks for Address Port =================
                                 .EQU ADDRBIT_PORT_INIT           = (0b11111111) ; testing, normally (0b00000000)
                                 .EQU ADDRBIT_DDR_INPUT           = (0b00000000)
                                 .EQU ADDRBIT_DDR_OUTPUT          = (0b11111111)
                                 .EQU ADDRBIT_DDR_INIT            = ADDRBIT_DDR_OUTPUT
                                 
                                 ; === Bitmasks for Data/High Address Port =======
                                 .EQU DATABIT_PORT_INIT           = (0b11111111)
                                 .EQU DATABIT_DDR_INPUT           = (0b00000000)
                                 .EQU DATABIT_DDR_OUTPUT          = (0b11111111)
                                 .EQU DATABIT_DDR_INIT            = DATABIT_DDR_INPUT
                                 
                                 ; === Bitmasks for Control Port =================
                                 .EQU CTRLBIT_PORT_INIT           = (0b00100000)
                                 .EQU CTRLBIT_DDR_INPUT           = (0b00000000)
                                 .EQU CTRLBIT_DDR_OUTPUT          = (0b11111111)
                                 .EQU CTRLBIT_DDR_INIT            = CTRLBIT_DDR_OUTPUT
                                 
                                 .EQU CTRLBIT_MASK                = (0b11111111)
                                 .EQU SYNCBIT_MASK                = (0b10000000)
                                 .EQU HALLATBIT_MASK              = (0b01000000)
                                 .EQU CPUDISBIT_MASK              = (0b00100000)
                                 .EQU VBLANKBIT_MASK              = (0b00010000)
                                 .EQU VDRAWBIT_MASK               = (0b00001000)
                                 .EQU EXTRAADDR_MASK              = (0b00000111)
                                 .EQU NOT_SYNCBIT_MASK            = (0b01111111)
                                 .EQU NOT_HALLATBIT_MASK          = (0b10111111)
                                 .EQU NOT_CPUDISBIT_MASK          = (0b11011111)
                                 .EQU NOT_VBLANKBIT_MASK          = (0b11101111)
                                 .EQU NOT_VDRAWBIT_MASK           = (0b11110111)
                                 .EQU NOT_EXTRAADDR_MASK          = (0b11111000)
                                 
                                 .EQU SYNCPIN    = 7
                                 .EQU HALLATPIN  = 6
                                 .EQU CPUDISPIN  = 5
                                 .EQU VBLANKPIN  = 4
                                 .EQU VDRAWPIN   = 3
                                 .EQU A18PIN     = 2
                                 .EQU A17PIN     = 1
                                 .EQU A16PIN     = 0
                                 
                                 ; === Bitmasks for Control Port 2 ===============
                                 .EQU CTL2BIT_PORT_INIT           = (0b11110111)
                                 .EQU CTL2BIT_DDR_INIT            = (0b00011111)
                                 
                                 .EQU CTL2BIT_MASK                = (0b00001111)
                                 .EQU ENABLEBIT_MASK              = (0b00000101)
                                 .EQU DACENBIT_MASK               = (0b00010000)
                                 .EQU DEBUGBIT_MASK               = (0b00001000)
                                 .EQU OEBIT_MASK                  = (0b00000100)
                                 .EQU CLOCKBIT_MASK               = (0b00000010)
                                 .EQU WEBIT_MASK                  = (0b00000001)
                                 
                                 .EQU NOT_ENABLEBIT_MASK          = (0b11111001)
                                 .EQU NOT_DACENBIT_MASK           = (0b11101111)
                                 .EQU NOT_DEBUGBIT_MASK           = (0b11110111)
                                 .EQU NOT_OEBIT_MASK              = (0b11111011)
                                 .EQU NOT_CLOCKBIT_MASK           = (0b11111101)
                                 .EQU NOT_WEBIT_MASK              = (0b11111110)
                                 
                                 .EQU DACENPIN                    = 4
                                 .EQU DEBUGPIN                    = 3
                                 .EQU OEPIN                       = 2
                                 .EQU CLOCKPIN                    = 1
                                 .EQU WEPIN                       = 0
                                 
                                 #endif
                                 #include "vangogh/registers.inc"
                                 
                                 #ifndef REGISTERS_INC
                                 #include "constants.inc"
                                 
                                 #ifndef CONSTANTS_INC
                                 #endif
                                 
                                 .EQU PPUREG_MODE = 0
                                 
                                 .EQU PPUREG_MODE_VRAM_DIRECT_6 = 0
                                 .EQU PPUREG_MODE_VRAM_DIRECT_5 = 1
                                 .EQU PPUREG_MODE_LINE_BUFFER   = 2
                                 
                                 .CSEG
                                 
                                 ; Loads data from a PPU register.
                                 ; Cycles: 7
                                 ; Inputs:
                                 ;   @0	CPU register to load into
                                 ;   @1	PPU register to load from (00 to FF)
                                 ; Outputs:
                                 ;   @0 contains the requested data from ppureg
                                 ; Clobbers:
                                 ;   X (r26/r27), rTEMP
                                 .MACRO LOAD_PPUREG
                                 ldi XL, LOW(ppu_registers)  ; [1]
                                 ldi XH, HIGH(ppu_registers) ; [1]
                                 ldi rTEMP, @1               ; [1]
                                 add XL, rTEMP               ; [1]
                                 adc XH, rZERO               ; [1]
                                 ld @0, X                    ; [2]
                                 .ENDM
                                 
                                 ; Saves data into a PPU register.
                                 ; Cycles:
                                 ; Inputs:
                                 ;   @0	PPU register to save into (00 to FF)
                                 ;   @1	CPU register to save from
                                 .MACRO SAVE_PPUREG
                                 ldi XL, LOW(ppu_registers)  ; [1]
                                 ldi XH, HIGH(ppu_registers) ; [1]
                                 ldi rTEMP, @0               ; [1]
                                 add XL, rTEMP               ; [1]
                                 adc XH, rZERO               ; [1]
                                 st X, @1                    ; [2]
                                 .ENDM
                                 
                                 .MACRO SAVE_PPUREG_IMM
                                 ldi XL, LOW(ppu_registers)  ; [1]
                                 ldi XH, HIGH(ppu_registers) ; [1]
                                 ldi rTEMP, @0               ; [1]
                                 ldi rTEMP2, @1              ; [1]
                                 add XL, rTEMP               ; [1]
                                 adc XH, rZERO               ; [1]
                                 st X, rTEMP2                ; [2]
                                 .ENDM
                                 
                                 ; Loads the PPU register address into X.
                                 ; Outputs:
                                 ;   X contains the address of PPU register data
                                 ; Clobbers:
                                 ;   X (r26/r27)
                                 .MACRO LOAD_PPUREG_ADDR
                                 ldi XL, LOW(ppu_registers)
                                 ldi XH, HIGH(ppu_registers)
                                 .ENDM
                                 
                                 ; Initializes the PPU registers to default values.
                                 init_ppu_registers:
00004d e0a0
00004e e0b1
00004f e080
000050 e092
000051 0fa8
000052 1db1
000053 939c                              SAVE_PPUREG_IMM PPUREG_MODE, PPUREG_MODE_LINE_BUFFER
000054 9508                              ret
                                 
                                 .DSEG
                                 .ORG 0x0100
                                 ppu_registers:
000100                           .BYTE 256
                                 
                                 #endif
                                 #include "vangogh/vram.inc"
                                 
                                 #ifndef VRAM_INC
                                 #define VRAM_INC
                                 
                                 #include "constants.inc"
                                 
                                 #ifndef CONSTANTS_INC
                                 #endif
                                 #include "shared/utilities.inc"
                                 
                                 #ifndef UTILITY_INC
                                 #define UTILITY_INC
                                 
                                 ; Universal Constant Definitions
                                 .DEF rCTEMP		= r0
                                 .DEF rZERO		= r1
                                 
                                 .DEF rTEMP3		= r23
                                 .DEF rTEMP		= r24
                                 .DEF rTEMP2		= r25
                                 
                                 ; Uses rTEMP to load an immediate into a low (r0-r15) register.
                                 ; @0 = register to load into
                                 ; @1 = value to load
                                 ; Cycles: 2
                                 ;
                                 .MACRO _LDI
                                       ldi rTEMP, @1
                                       mov @0, rTEMP
                                 .ENDM
                                 
                                 ; Uses rTEMP to compare a low (r0-r15) register with an immediate.
                                 ; @0 = register to compare
                                 ; @1 = value to compare against
                                 ; Cycles: 2
                                 ;
                                 .MACRO _CPI
                                       mov rTEMP, @0
                                       cpi rTEMP, @1
                                 .ENDM
                                 
                                 ; Various NOP slides.
                                 .MACRO _NOP2
                                 	nop
                                 	nop
                                 .ENDM
                                 
                                 .MACRO _NOP4
                                 	_NOP2
                                 	_NOP2
                                 .ENDM
                                 
                                 .MACRO _NOP8
                                 	_NOP4
                                 	_NOP4
                                 .ENDM
                                 
                                 .MACRO _NOP16
                                 	_NOP8
                                 	_NOP8
                                 .ENDM
                                 
                                 .MACRO _NOP32
                                 	_NOP16
                                 	_NOP16
                                 .ENDM
                                 
                                 .MACRO _NOP64
                                 	_NOP32
                                 	_NOP32
                                 .ENDM
                                 
                                 .MACRO _NOP128
                                 	_NOP64
                                 	_NOP64
                                 .ENDM
                                 
                                 .MACRO _NOP256
                                 	_NOP128
                                 	_NOP128
                                 .ENDM
                                 
                                 ; Jump using an offset in a jump table.
                                 ; @0 = address of jump table
                                 ; @1 = offset of jump address
                                 .MACRO JUMP_TO
                                 	ldi ZL, LOW(@0)
                                 	ldi ZH, HIGH(@0)
                                 	add ZL, @1
                                 	adc ZH, rZERO
                                 	ijmp
                                 .ENDM
                                 
                                 #endif
                                 
                                 .DEF rYPOS	= r14
                                 .DEF rXPOS  = r15
                                 
                                 .CSEG
                                 
                                 .MACRO OE_ON  ; 1 cycle
                                       cbi CTL2PORT, OEPIN
                                 .ENDM
                                 
                                 .MACRO OE_OFF  ; 1 cycle
                                       sbi CTL2PORT, OEPIN
                                 .ENDM
                                 
                                 .MACRO WE_ON  ; 1 cycle
                                       cbi CTL2PORT, WEPIN
                                 .ENDM
                                 
                                 .MACRO WE_OFF  ; 1 cycle
                                       sbi CTL2PORT, WEPIN
                                 .ENDM
                                 
                                 .MACRO OE_AND_WE_OFF  ; 2 cycles
                                       sbi CTL2PORT, OEPIN
                                       sbi CTL2PORT, WEPIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_VDU
                                       cbi CTRLPORT, A18PIN
                                       cbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_VRAM0
                                       cbi CTRLPORT, A18PIN
                                       sbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_VRAM1
                                       sbi CTRLPORT, A18PIN
                                       cbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_PALRAM
                                       sbi CTRLPORT, A18PIN
                                       sbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 ; Sets data port to be an input.
                                 .MACRO SET_DATA_INPUT
                                       ldi rTEMP, DATABIT_DDR_INPUT
                                       out DATADDR, rTEMP
                                 .ENDM
                                 
                                 ; Sets data port to be an output.
                                 .MACRO SET_DATA_OUTPUT
                                       ldi rTEMP, DATABIT_DDR_OUTPUT
                                       out DATADDR, rTEMP
                                 .ENDM
                                 
                                 ; Reads from the data port into a high (r16-r31) register.
                                 .MACRO READ_DATA_INTO
                                       SET_DATA_INPUT
                                       OE_ON
                                       nop
                                       in @0, DATAPORT
                                       OE_OFF
                                 .ENDM
                                 
                                 ; Writes to the data port from a high (r16-r31) register.
                                 .MACRO WRITE_DATA_FROM
                                       SET_DATA_OUTPUT
                                       out DATAPORT, @0
                                       WE_ON
                                       nop
                                       WE_OFF
                                 .ENDM
                                 
                                 ; Sets the high address latch to the value in the specified register.
                                 ;
                                 ; Inputs:
                                 ;       @0     Register containing the value to set high address latch to
                                 ; Outputs:
                                 ;       none
                                 ; Clobbers:
                                 ;       rTEMP, rTEMP2, rTEMP3
                                 ; Timing:
                                 ;       9 cycles
                                 .MACRO SET_HAL
                                     in rTEMP, DATADDR
                                     in rTEMP2, DATAPORT
                                     ldi rTEMP3, DATABIT_DDR_OUTPUT
                                     out DATADDR, rTEMP3
                                     out DATAPORT, @0
                                     sbi CTRLPORT, HALLATPIN
                                     cbi CTRLPORT, HALLATPIN
                                     out DATAPORT, rTEMP2
                                     out DATADDR, rTEMP
                                 .ENDM
                                 
                                 setup_palette:
                                       ; Right now palette RAM high address is forced to 00.
                                 
                                       ; Set data lines to outputs.
000055 ef8f                            ldi rTEMP, DATABIT_DDR_OUTPUT
000056 b987                            out DATADDR, rTEMP
                                 
                                       ; Turn VDRAW off (by setting it high).
                                       ; It probably already is, but let's do it anyway.
000057 9a5b                            sbi CTRLPORT, VDRAWPIN
                                 
000058 9a5a
000059 9a59
00005a 9858                            ADDRESS_PALRAM
                                 
                                       ; Set high address latch to 0x80 (for high bytes).
00005b e880                            ldi rTEMP, 0x80
00005c b187
00005d b198
00005e ef7f
00005f b977
000060 b988
000061 9a5e
000062 985e
000063 b998
000064 b987                            SET_HAL rTEMP
                                 
                                       ; Loop through low addresses and set data = address for now.
000065 e080                            ldi rTEMP, 0
                                       ;ldi rTEMP2, 255
                                 
                                 palette_set_loop_low:
000066 958a                            dec rTEMP
000067 b982                            out ADDRPORT, rTEMP
000068 2f98                            mov rTEMP2, rTEMP
000069 b998                            out DATAPORT, rTEMP2
00006a 9828                            WE_ON
00006b 0000
00006c 0000
00006d 0000
00006e 0000                            _NOP4
00006f 9a28                            WE_OFF
000070 3080                            cpi rTEMP, 0
000071 f7a1                            brne palette_set_loop_low
                                 
                                       ; Set high address latch to 0x00 (for low bytes).
000072 e080                            ldi rTEMP, 0x00
000073 b187
000074 b198
000075 ef7f
000076 b977
000077 b988
000078 9a5e
000079 985e
00007a b998
00007b b987                            SET_HAL rTEMP
                                 
                                       ; Loop through low addresses and set data = address for now.
00007c e080                            ldi rTEMP, 0
                                       ;ldi rTEMP2, 255
                                 
                                 palette_set_loop_high:
00007d 958a                            dec rTEMP
00007e b982                            out ADDRPORT, rTEMP
00007f 2f98                            mov rTEMP2, rTEMP
000080 b998                            out DATAPORT, rTEMP2
000081 9828                            WE_ON
000082 0000
000083 0000
000084 0000
000085 0000                            _NOP4
000086 9a28                            WE_OFF
000087 3080                            cpi rTEMP, 0
000088 f7a1                            brne palette_set_loop_high
                                 
                                       ; Reset data lines back to inputs with pullups enabled.
000089 e080                            ldi rTEMP, DATABIT_DDR_INPUT
00008a b987                            out DATADDR, rTEMP
00008b ef8f                            ldi rTEMP, DATABIT_PORT_INIT
00008c b988                            out DATAPORT, rTEMP
                                 
00008d 985a
00008e 9859
00008f 9858                            ADDRESS_VDU
                                 
000090 9508                            ret
                                 
                                 ; Sets up VRAM with a test tartan pattern.
                                 setup_vram:
                                       ; Set data lines to outputs.
000091 ef8f                            ldi rTEMP, DATABIT_DDR_OUTPUT
000092 b987                            out DATADDR, rTEMP
                                 
000093 985a
000094 9a59
000095 9858                            ADDRESS_VRAM0
                                 
                                       ; Loop through high addresses, 255 to 0.
000096 e080
000097 2ee8                            _LDI rYPOS, 0
                                 
                                 vram_set_loop_y:
000098 94ea                            dec rYPOS
                                 
                                       ; Set high address latch to Y position.
000099 b187
00009a b198
00009b ef7f
00009c b977
00009d b8e8
00009e 9a5e
00009f 985e
0000a0 b998
0000a1 b987                            SET_HAL rYPOS
                                 
                                       ; Loop through low addresses and set data lines to make a tartan.
                                       ; = (xpos + ypos) >> 3 for now.
0000a2 e080
0000a3 2ef8                            _LDI rXPOS, 0
                                 
                                 vram_set_loop_x:
0000a4 94fa                            dec rXPOS
0000a5 b8f2                            out ADDRPORT, rXPOS
0000a6 2d8f                            mov rTEMP, rXPOS
0000a7 0f88                            lsl rTEMP
0000a8 7f88                            andi rTEMP, 0xF8
0000a9 2d9e                            mov rTEMP2, rYPOS
0000aa 9596                            lsr rTEMP2
0000ab 9596                            lsr rTEMP2
0000ac 9596                            lsr rTEMP2
0000ad 7097                            andi rTEMP2, 0x07
0000ae 2b98                            or rTEMP2, rTEMP
0000af b998                            out DATAPORT, rTEMP2
0000b0 9828                            WE_ON
0000b1 0000
0000b2 0000
0000b3 0000
0000b4 0000                            _NOP4
0000b5 9a28                            WE_OFF
0000b6 2d8f
0000b7 3080                            _CPI rXPOS, 0
0000b8 f759                            brne vram_set_loop_x
                                 
0000b9 2d8e
0000ba 3080                            _CPI rYPOS, 0
0000bb f6e1                            brne vram_set_loop_y
                                 
                                       ; Reset data lines back to inputs with pullups enabled.
0000bc e080                            ldi rTEMP, DATABIT_DDR_INPUT
0000bd b987                            out DATADDR, rTEMP
0000be ef8f                            ldi rTEMP, DATABIT_PORT_INIT
0000bf b988                            out DATAPORT, rTEMP
                                 
0000c0 985a
0000c1 9859
0000c2 9858                            ADDRESS_VDU
                                 
0000c3 9508                            ret
                                 
                                 
                                 ; Zeroes out all VRAM -- both chips.
                                 clear_vram:
                                       ; Set data lines to outputs.
0000c4 ef8f                            ldi rTEMP, DATABIT_DDR_OUTPUT
0000c5 b987                            out DATADDR, rTEMP
                                 
0000c6 985a
0000c7 9a59
0000c8 9858                            ADDRESS_VRAM0
0000c9 d005                            rcall zero_loop
0000ca 9a5a
0000cb 9859
0000cc 9858                            ADDRESS_VRAM1
0000cd d001                            rcall zero_loop
                                 
0000ce 9508                            ret
                                 
                                 ; Zeroing loop called by clear_vram.
                                 zero_loop:
                                 
                                       ; Loop through high addresses, 255 to 0.
0000cf e080
0000d0 2ee8                            _LDI rYPOS, 0
                                 
                                 clear_loop_y:
0000d1 94ea                            dec rYPOS
                                 
                                       ; Set high address latch to Y position.
0000d2 b187
0000d3 b198
0000d4 ef7f
0000d5 b977
0000d6 b8e8
0000d7 9a5e
0000d8 985e
0000d9 b998
0000da b987                            SET_HAL rYPOS
                                 
0000db e080
0000dc 2ef8                            _LDI rXPOS, 0
                                 
                                 clear_loop_x:
0000dd 94fa                            dec rXPOS
0000de b8f2                            out ADDRPORT, rXPOS
0000df e090                            ldi rTEMP2, 0
0000e0 b998                            out DATAPORT, rTEMP2
0000e1 9828                            WE_ON
0000e2 0000
0000e3 0000
0000e4 0000
0000e5 0000                            _NOP4
0000e6 9a28                            WE_OFF
0000e7 2d8f
0000e8 3080                            _CPI rXPOS, 0
0000e9 f799                            brne clear_loop_x
                                 
0000ea 2d8e
0000eb 3080                            _CPI rYPOS, 0
0000ec f721                            brne clear_loop_y
                                 
                                       ; Reset data lines back to inputs with pullups enabled.
0000ed e080                            ldi rTEMP, DATABIT_DDR_INPUT
0000ee b987                            out DATADDR, rTEMP
0000ef ef8f                            ldi rTEMP, DATABIT_PORT_INIT
0000f0 b988                            out DATAPORT, rTEMP
                                 
0000f1 985a
0000f2 9859
0000f3 9858                            ADDRESS_VDU
                                 
0000f4 9508                            ret
                                 
                                 #endif
                                 #include "shared/utilities.inc"
                                 
                                 #ifndef UTILITY_INC
                                 #endif
                                 
                                 ;d8888b. d88888b d88888b d888888b d8b   db d88888b .d8888.
                                 ;88  `8D 88'     88'       `88'   888o  88 88'     88'  YP
                                 ;88   88 88ooooo 88ooo      88    88V8o 88 88ooooo `8bo.
                                 ;88   88 88~~~~~ 88~~~      88    88 V8o88 88~~~~~   `Y8b.
                                 ;88  .8D 88.     88        .88.   88  V888 88.     db   8D
                                 ;Y8888D' Y88888P YP      Y888888P VP   V8P Y88888P `8888Y'
                                 
                                 ; Global macro definitions
                                 ; =========================================================
                                 .DEF rTILEGRAFL = r2
                                 .DEF rTILEGRAFH = r3
                                 
                                 .DEF rTILEGRIDL = r4
                                 .DEF rTILEGRIDH = r5
                                 
                                 .DEF rREADBUFL = r6
                                 .DEF rREADBUFH = r7
                                 
                                 .DEF rWRITEBUFL = r8
                                 .DEF rWRITEBUFH = r9
                                 
                                 .DEF rTILEINDEX = r10
                                 .DEF rTILEBG = r11
                                 .DEF rTILEFG = r12
                                 .DEF rTILEOUT = r13
                                 
                                 .DEF rLINECOUNTER	= r17
                                 .DEF rSTATBITS		= r18
                                 .DEF rCTRLBITS		= r19
                                 .DEF rADDRDDR		= r20
                                 .DEF rDATADDR		= r21
                                 .DEF rDEBUGBITS     = r22
                                 
                                 ; === Timing Values =============================
                                       ; At 20MHz:
                                       ; clkIO with OC=0x04F6 gives us 15.7356412 kHz
                                       ; At 19.9044MHz:
                                       ; clkIO with OC=0x04BC gives us 15.7414674 kHz
                                       ; At 21.47727MHz:
                                       ; clkIO with OC=0x0554 gives us 15.7342637 kHz
                                       ; (NTSC color line rate is 15.734 kHz).
                                       ; At 28.63636MHz:
                                       ; clkIO with OC=0x071B gives us 15.7342637 kHz
                                 .SET HSYNC_VALUE_HI		= 0x04
                                 .SET HSYNC_VALUE_LO		= 0xF6
                                 
                                 ;.88b  d88.  .d8b.   .o88b. d8888b.  .d88b.  .d8888.
                                 ;88'YbdP`88 d8' `8b d8P  Y8 88  `8D .8P  Y8. 88'  YP
                                 ;88  88  88 88ooo88 8P      88oobY' 88    88 `8bo.
                                 ;88  88  88 88~~~88 8b      88`8b   88    88   `Y8b.
                                 ;88  88  88 88   88 Y8b  d8 88 `88. `8b  d8' db   8D
                                 ;YP  YP  YP YP   YP  `Y88P' 88   YD  `Y88P'  `8888Y'
                                 
                                 .MACRO VBLANK_ON ; 1 cycle
                                       andi rCTRLBITS, NOT_VBLANKBIT_MASK
                                 .ENDM
                                 
                                 .MACRO VBLANK_OFF ; 1 cycle
                                       ori rCTRLBITS, VBLANKBIT_MASK
                                 .ENDM
                                 
                                 .MACRO VDRAW_ON ; 1 cycle
                                       andi rCTRLBITS, NOT_VDRAWBIT_MASK
                                 .ENDM
                                 
                                 .MACRO VDRAW_OFF ; 1 cycle
                                       ori rCTRLBITS, VDRAWBIT_MASK
                                 .ENDM
                                 
                                 .MACRO DEBUG_PULSE ; 2 cycles
                                       sbi CTL2PORT, DEBUGPIN
                                       cbi CTL2PORT, DEBUGPIN
                                 .ENDM
                                 
                                 .MACRO DAC_ENABLE  ; 1 cycle
                                       cbi CTL2PORT, DACENPIN
                                 .ENDM
                                 
                                 .MACRO DAC_DISABLE  ; 1 cycle
                                       sbi CTL2PORT, DACENPIN
                                 .ENDM
                                 
                                 .MACRO TOGGLE_SYNC_BIT  ; 2 cycles
                                       ldi rTEMP, SYNCBIT_MASK ; [1]
                                       eor rCTRLBITS, rTEMP    ; [1]
                                 .ENDM
                                 
                                 .MACRO IMMED_TOGGLE_SYNC_PIN ; 4 cycles
                                       in rTEMP, CTRLPORT            ; [1]
                                       ldi rTEMP2, SYNCBIT_MASK      ; [1]
                                       eor rTEMP, rTEMP2				; [1]
                                       out CTRLPORT, rTEMP			; [1]
                                 .ENDM
                                 
                                 ;.d8888. db    db d8888b. d8888b.  .d88b.  db    db d888888b d888888b d8b   db d88888b .d8888.
                                 ;88'  YP 88    88 88  `8D 88  `8D .8P  Y8. 88    88 `~~88~~'   `88'   888o  88 88'     88'  YP
                                 ;`8bo.   88    88 88oooY' 88oobY' 88    88 88    88    88       88    88V8o 88 88ooooo `8bo.
                                 ;  `Y8b. 88    88 88~~~b. 88`8b   88    88 88    88    88       88    88 V8o88 88~~~~~   `Y8b.
                                 ;db   8D 88b  d88 88   8D 88 `88. `8b  d8' 88b  d88    88      .88.   88  V888 88.     db   8D
                                 ;`8888Y' ~Y8888P' Y8888P' 88   YD  `Y88P'  ~Y8888P'    YP    Y888888P VP   V8P Y88888P `8888Y'
                                 
                                 boot_wait:
                                       ; A simple wait for RAM to stabilize before attempting writes.
0000f5 e081                            ldi rTEMP, 1
                                 boot_wait_outer_loop:
0000f6 e090                            ldi rTEMP2, 0
                                 boot_wait_inner_loop:
0000f7 959a                            dec rTEMP2
0000f8 f7f1                            brne boot_wait_inner_loop
0000f9 958a                            dec rTEMP
0000fa f7d9                            brne boot_wait_outer_loop
0000fb 9508                            ret
                                 
                                 ; Turn on the "interrupt" debug bit - 1 cycle
                                 .MACRO SET_INT_DEBUG_BIT
                                     ori rDEBUGBITS, 0x40
                                 .ENDM
                                       
                                 ; Turn off the "interrupt" debug bit - 1 cycle
                                 .MACRO CLEAR_INT_DEBUG_BIT
                                     andi rDEBUGBITS, 0xBF
                                 .ENDM
                                 
                                 ; Turn on the "error" debug bit.
                                 .MACRO SET_ERROR_DEBUG_BIT
                                     ori rDEBUGBITS, 0x80
                                 .ENDM
                                 
                                 ; Turn off the "error" debug bit.
                                 .MACRO CLEAR_ERROR_DEBUG_BIT
                                     andi rDEBUGBITS, 0x7f
                                 .ENDM
                                 
                                 ; Sets the debug output latch to the value in rDEBUGBITS - 16 cycles
                                 .MACRO LATCH_DEBUG_LIGHTS
                                     in rTEMP, DATAPORT
                                     push rTEMP
                                     in rTEMP, DATADDR
                                     push rTEMP
                                     SET_DATA_OUTPUT
                                     out DATAPORT, rDEBUGBITS
                                     DEBUG_PULSE
                                     pop rTEMP
                                     out DATADDR, rTEMP
                                     pop rTEMP
                                     out DATAPORT, rTEMP
                                 .ENDM
                                 
                                 main:
                                 
                                 ;.d8888. d88888b d888888b db    db d8888b.
                                 ;88'  YP 88'     `~~88~~' 88    88 88  `8D
                                 ;`8bo.   88ooooo    88    88    88 88oodD'
                                 ;  `Y8b. 88~~~~~    88    88    88 88~~~
                                 ;db   8D 88.        88    88b  d88 88
                                 ;`8888Y' Y88888P    YP    ~Y8888P' 88
                                 
                                     ; Disable interrupts.
0000fc 94f8                          cli
                                 
                                     ; This should be unneeded but putting it here anyway: disable INT0 interrupt
0000fd e080                          ldi rTEMP, 0
0000fe 9380 001d                     sts EIMSK, rTEMP
                                 
                                     ; === I/O Ports ========================================================
                                 
                                     ; Set up address port pins.
000100 ef4f                          ldi rADDRDDR, ADDRBIT_DDR_INIT
000101 b941                          out ADDRDDR, rADDRDDR
000102 ef8f                          ldi rTEMP, ADDRBIT_PORT_INIT
000103 b982                          out ADDRPORT, rTEMP
                                 
                                     ; Set up data port pins.
000104 e050                          ldi rDATADDR, DATABIT_DDR_INIT
000105 b957                          out DATADDR, rDATADDR
000106 ef8f                          ldi rTEMP, DATABIT_PORT_INIT
000107 b988                          out DATAPORT, rTEMP
                                 
                                     ; Set up control port 1 pins.
000108 ef8f                          ldi rTEMP, CTRLBIT_DDR_INIT
000109 b98a                          out CTRLDDR, rTEMP
00010a e280                          ldi rTEMP, CTRLBIT_PORT_INIT
00010b b98b                          out CTRLPORT, rTEMP
                                 
                                     ; Set up control port 2 pins.
00010c e18f                          ldi rTEMP, CTL2BIT_DDR_INIT
00010d b984                          out CTL2DDR, rTEMP
00010e ef87                          ldi rTEMP, CTL2BIT_PORT_INIT
00010f b985                          out CTL2PORT, rTEMP
                                 
000110 e060                          ldi rDEBUGBITS, 0x00
000111 b188
000112 938f
000113 b187
000114 938f
000115 ef8f
000116 b987
000117 b968
000118 9a2b
000119 982b
00011a 918f
00011b b987
00011c 918f
00011d b988                          LATCH_DEBUG_LIGHTS
                                 
00011e dfd6                          rcall boot_wait
                                 
                                     ; === Timers ===========================================================
                                 
                                     ; Set Timer 0 to toggle OC0A and clear on compare match.
                                     ;ldi rTEMP, (1 << COM0A0) | (1 << WGM01)
                                     ;sts _SFR_MEM_ADDR(TCCR0A), rTEMP
                                 
                                     ; Set OC1A to toggle on each output compare.
                                     ;ldi rTEMP, (1 << COM1A0)
                                     ;sts _SFR_MEM_ADDR(TCCR1A), rTEMP
                                 
                                     ; Set Timer 0 clock source to clkIO.
                                     ;ldi rTEMP, (1 << CS00)
                                     ;sts _SFR_MEM_ADDR(TCCR0B), rTEMP
                                 
                                     ; Set Timer 1 to clkIO and to clear on timer match.
00011f e089                          ldi rTEMP, (1 << WGM02) | (1 << CS10)
000120 9380 0081                     sts TCCR1B, rTEMP
                                 
                                     ; Set output compare value for OC0A
                                     ; 0x00 outputs a clock at half the AVR's frequency
                                     ;ldi rTEMP, 0x00
                                     ;sts _SFR_MEM_ADDR(OCR0A), rTEMP
                                 
                                     ; Set output compare value for OC1A
000122 e084                          ldi rTEMP, HSYNC_VALUE_HI
000123 9380 0089                     sts OCR1AH, rTEMP
000125 ef86                          ldi rTEMP, HSYNC_VALUE_LO
000126 9380 0088                     sts OCR1AL, rTEMP
                                 
                                     ; Set interrupt on OC1A compare
000128 e082                          ldi rTEMP, (1 << OCIE1A)
000129 9380 006f                     sts TIMSK1, rTEMP
                                 
00012b e061                          ldi rDEBUGBITS, 0x01
00012c b188
00012d 938f
00012e b187
00012f 938f
000130 ef8f
000131 b987
000132 b968
000133 9a2b
000134 982b
000135 918f
000136 b987
000137 918f
000138 b988                          LATCH_DEBUG_LIGHTS
                                 
                                     ; === RAM configuration ================================================
                                 
000139 dfbb                          rcall boot_wait
00013a e063                          ldi rDEBUGBITS, 0x03
00013b b188
00013c 938f
00013d b187
00013e 938f
00013f ef8f
000140 b987
000141 b968
000142 9a2b
000143 982b
000144 918f
000145 b987
000146 918f
000147 b988                          LATCH_DEBUG_LIGHTS
                                 
000148 940e 004d                     call init_ppu_registers
00014a e067                          ldi rDEBUGBITS, 0x07
00014b b188
00014c 938f
00014d b187
00014e 938f
00014f ef8f
000150 b987
000151 b968
000152 9a2b
000153 982b
000154 918f
000155 b987
000156 918f
000157 b988                          LATCH_DEBUG_LIGHTS
                                 
                                     ;call setup_palette
                                 
                                 temp_set_line_buffer_1:
000158 2788                          eor rTEMP, rTEMP
000159 2799                          eor rTEMP2, rTEMP2
00015a e07d                          ldi rTEMP3, 0x0d
00015b e2b2                          ldi XH, HIGH(line_buffer_1)
00015c e0a0                          ldi XL, LOW(line_buffer_1)
                                 line_buffer_1_set_loop:
00015d 0f97                          add rTEMP2, rTEMP3
00015e 939d                          st X+, rTEMP2
00015f 9583                          inc rTEMP
000160 f7e1                          brne line_buffer_1_set_loop
                                 
                                 temp_set_line_buffer_2:
000161 ef9f                          ldi rTEMP2, 0xff
000162 e2b3                          ldi XH, HIGH(line_buffer_2)
000163 e0a0                          ldi XL, LOW(line_buffer_2)
                                 line_buffer_2_set_loop:
000164 939d                          st X+, rTEMP2
000165 9583                          inc rTEMP
000166 f7e9                          brne line_buffer_2_set_loop
                                 
                                 temp_set_tile_graphic_data:
000167 e0b2                          ldi XH, HIGH(tile_graphic_data)
000168 e0a0                          ldi XL, LOW(tile_graphic_data)
000169 e080                          ldi rTEMP, 0
00016a e77c                          ldi rTEMP3, 0b01111100
                                 tile_graphic_data_set_loop_0:
00016b 937d                          st X+, rTEMP3
00016c 9583                          inc rTEMP
00016d f7e9                          brne tile_graphic_data_set_loop_0
00016e e872                          ldi rTEMP3, 0b10000010
                                 tile_graphic_data_set_loop_1:
00016f 937d                          st X+, rTEMP3
000170 9583                          inc rTEMP
000171 f7e9                          brne tile_graphic_data_set_loop_1
000172 e872                          ldi rTEMP3, 0b10000010
                                 tile_graphic_data_set_loop_2:
000173 937d                          st X+, rTEMP3
000174 9583                          inc rTEMP
000175 f7e9                          brne tile_graphic_data_set_loop_2
000176 e972                          ldi rTEMP3, 0b10010010
                                 tile_graphic_data_set_loop_3:
000177 937d                          st X+, rTEMP3
000178 9583                          inc rTEMP
000179 f7e9                          brne tile_graphic_data_set_loop_3
00017a e872                          ldi rTEMP3, 0b10000010
                                 tile_graphic_data_set_loop_4:
00017b 937d                          st X+, rTEMP3
00017c 9583                          inc rTEMP
00017d f7e9                          brne tile_graphic_data_set_loop_4
00017e e872                          ldi rTEMP3, 0b10000010
                                 tile_graphic_data_set_loop_5:
00017f 937d                          st X+, rTEMP3
000180 9583                          inc rTEMP
000181 f7e9                          brne tile_graphic_data_set_loop_5
000182 e77c                          ldi rTEMP3, 0b01111100
                                 tile_graphic_data_set_loop_6:
000183 937d                          st X+, rTEMP3
000184 9583                          inc rTEMP
000185 f7e9                          brne tile_graphic_data_set_loop_6
000186 e070                          ldi rTEMP3, 0b00000000
                                 tile_graphic_data_set_loop_7:
000187 937d                          st X+, rTEMP3
000188 9583                          inc rTEMP
000189 f7e9                          brne tile_graphic_data_set_loop_7
                                 
                                 temp_set_tile_grid:
00018a e1b2                          ldi XH, HIGH(tile_grid)
00018b e0a0                          ldi XL, LOW(tile_grid)
00018c e080                          ldi rTEMP, 0
00018d e090                          ldi rTEMP2, 0
00018e ef7f                          ldi rTEMP3, 0xFF
                                 tile_grid_set_loop:
00018f 938d                          st X+, rTEMP
000190 e070                          ldi rTEMP3, 0x00
000191 937d                          st X+, rTEMP3
000192 ef7f                          ldi rTEMP3, 0xFF
000193 937d                          st X+, rTEMP3
000194 9601                          adiw rTEMP2:rTEMP, 1
000195 3094                          cpi rTEMP2, 0x04
000196 f7c1                          brne tile_grid_set_loop
                                 
000197 e06f                          ldi rDEBUGBITS, 0x0F
000198 b188
000199 938f
00019a b187
00019b 938f
00019c ef8f
00019d b987
00019e b968
00019f 9a2b
0001a0 982b
0001a1 918f
0001a2 b987
0001a3 918f
0001a4 b988                          LATCH_DEBUG_LIGHTS
                                 
0001a5 940e 0091                     call setup_vram
0001a7 e16f                          ldi rDEBUGBITS, 0x1F
0001a8 b188
0001a9 938f
0001aa b187
0001ab 938f
0001ac ef8f
0001ad b987
0001ae b968
0001af 9a2b
0001b0 982b
0001b1 918f
0001b2 b987
0001b3 918f
0001b4 b988                          LATCH_DEBUG_LIGHTS
                                 
                                     ; === Registers ========================================================
                                     ; Set up registers for line tracking.
0001b5 2711                          eor rLINECOUNTER, rLINECOUNTER
0001b6 2722                          eor rSTATBITS, rSTATBITS
                                 
                                     ; Load tile graphic address into r3:r2 registers.
0001b7 e0f2                          ldi ZH, HIGH(tile_graphic_data) ; -1 = 28
0001b8 e0e0                          ldi ZL, LOW(tile_graphic_data)  ; -1 = 27
0001b9 2e3f                          mov rTILEGRAFH, ZH              ; -1 = 26
0001ba 2e2e                          mov rTILEGRAFL, ZL              ; -1 = 25
                                 
                                     ; Load tile grid address into r5:r4 registers.
0001bb e1b2                          ldi XH, HIGH(tile_grid)                 ; -1 = 24
0001bc e0a0                          ldi XL, LOW(tile_grid)                  ; -1 = 23
0001bd 2e5b                          mov rTILEGRIDH, XH                      ; -1 = 22
0001be 2e4a                          mov rTILEGRIDL, XL                      ; -1 = 21
                                 
                                     ; Set read buffer to point to line buffer 1.
0001bf e282
0001c0 2e78                          _LDI rREADBUFH, HIGH(line_buffer_1)
0001c1 e080
0001c2 2e68                          _LDI rREADBUFL, LOW(line_buffer_1)
                                 
                                     ; Set write buffer to point to line buffer 2.
0001c3 e283
0001c4 2e98                          _LDI rWRITEBUFH, HIGH(line_buffer_2)
0001c5 e080
0001c6 2e88                          _LDI rWRITEBUFL, LOW(line_buffer_2)
                                 
                                     ; Set up control bits register.
0001c7 e230                          ldi rCTRLBITS, CTRLBIT_PORT_INIT
                                 
                                     ; EOR control bits register with SYNC bit, as the first thing the
                                     ; interrupt line should do is pull SYNC low.
0001c8 e880                          ldi rTEMP, SYNCBIT_MASK
0001c9 2738                          eor rCTRLBITS, rTEMP
                                 
0001ca e36f                          ldi rDEBUGBITS, 0x3F
0001cb b188
0001cc 938f
0001cd b187
0001ce 938f
0001cf ef8f
0001d0 b987
0001d1 b968
0001d2 9a2b
0001d3 982b
0001d4 918f
0001d5 b987
0001d6 918f
0001d7 b988                          LATCH_DEBUG_LIGHTS
                                 
                                     ; Enable interrupts.
0001d8 9478                          sei
                                 
                                 loop:
0001d9 cfff                          rjmp loop
                                 
                                 ;db   db .d8888. db    db d8b   db  .o88b.   d888888b .d8888. d8888b.
                                 ;88   88 88'  YP `8b  d8' 888o  88 d8P  Y8     `88'   88'  YP 88  `8D
                                 ;88ooo88 `8bo.    `8bd8'  88V8o 88 8P           88    `8bo.   88oobY'
                                 ;88~~~88   `Y8b.    88    88 V8o88 8b           88      `Y8b. 88`8b
                                 ;88   88 db   8D    88    88  V888 Y8b  d8     .88.   db   8D 88 `88.
                                 ;YP   YP `8888Y'    YP    VP   V8P  `Y88P'   Y888888P `8888Y' 88   YD
                                 
                                 TIMER1_COMPA_vect:
                                 
0001da 6460                          SET_INT_DEBUG_BIT
0001db b188
0001dc 938f
0001dd b187
0001de 938f
0001df ef8f
0001e0 b987
0001e1 b968
0001e2 9a2b
0001e3 982b
0001e4 918f
0001e5 b987
0001e6 918f
0001e7 b988                          LATCH_DEBUG_LIGHTS
0001e8 7b6f                          CLEAR_INT_DEBUG_BIT
0001e9 b188
0001ea 938f
0001eb b187
0001ec 938f
0001ed ef8f
0001ee b987
0001ef b968
0001f0 9a2b
0001f1 982b
0001f2 918f
0001f3 b987
0001f4 918f
0001f5 b988                          LATCH_DEBUG_LIGHTS
                                 
                                     ; Start of front porch - 1.5 uS - 30 cycles
                                     ; Set control port lines as appropriate.
0001f6 b93b                          out CTRLPORT, rCTRLBITS                 ; [030 -01 =029]
                                 
                                     ; Load display mode from PPU register
0001f7 e0a0
0001f8 e0b1
0001f9 e080
0001fa 0fa8
0001fb 1db1
0001fc 900c                          LOAD_PPUREG   r0, PPUREG_MODE           ; [029 -07 =022]
                                 
                                     ; Ensure display mode only goes from 0 to 15 for now 
0001fd e08f                          ldi rTEMP, 0x0F                         ; [022 -01 =021]
0001fe 2208                          and r0, rTEMP                           ; [021 -01 =020]
                                 
                                     ; Finish up front porch
0001ff 0000
000200 0000
000201 0000
000202 0000
000203 0000
000204 0000
000205 0000
000206 0000
000207 0000
000208 0000
000209 0000
00020a 0000
00020b 0000
00020c 0000
00020d 0000
00020e 0000                          _NOP16                                  ; [020 -16 =004]
                                 
00020f b18b
000210 e890
000211 2789
000212 b98b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                     ; Start of sync tip - 4.7uS - 94 cycles
                                 
000213 ff27                          sbrs rSTATBITS, STATBIT_DISP            ; [094 -03 =091]
000214 c54d                          rjmp non_display_line                 
                                 
                                 display_line:
                                     ; 91 cycles of HSYNC left
000215 2ee1                          mov rYPOS, rLINECOUNTER                 ; [091 -01 =090]
000216 2f93                          mov rTEMP2, rCTRLBITS                   ; [090 -01 =089]
                                 
                                     ; Increment rLINECOUNTER by one.
000217 9513                          inc rLINECOUNTER                        ; [089 -01 =088]
                                 
000218 3f10                          cpi rLINECOUNTER, 240                   ; [088 -01 =087]
                                                                             ; [     ==     ] [     !=     ]
000219 f449                          brne skip_setup_vblank                  ; [087 -01 =086] [087 -02 =085]
                                 
                                 ;d888888b d8b   db d888888b d888888b   d8888b. db       .d8b.  d8b   db db   dD
                                 ;  `88'   888o  88   `88'   `~~88~~'   88  `8D 88      d8' `8b 888o  88 88 ,8P'
                                 ;   88    88V8o 88    88       88      88oooY' 88      88ooo88 88V8o 88 88,8P
                                 ;   88    88 V8o88    88       88      88~~~b. 88      88~~~88 88 V8o88 88`8b
                                 ;  .88.   88  V888   .88.      88      88   8D 88booo. 88   88 88  V888 88 `88.
                                 ;Y888888P VP   V8P Y888888P    YP      Y8888P' Y88888P YP   YP VP   V8P YP   YD
                                 
                                 setup_vblank:
                                     ; If result is 240:
                                     ;   - reset rLINECOUNTER to 0
00021a 2711                          eor rLINECOUNTER, rLINECOUNTER          ; [086 -01 =085]
                                     ;   - clear rSTATBITS:DISP
00021b 772f                          andi rSTATBITS, NOT_STATBIT_DISP_MASK   ; [085 -01 =084]
                                     ;   - toggle rSTATBITS:EVENFRAME
00021c e081                          ldi rTEMP, STATBIT_EVENFRAME_MASK       ; [084 -01 =083]
00021d 2728                          eor rSTATBITS, rTEMP                    ; [083 -01 =082]
                                     ;   - turn on ~VBLANK control line
00021e 7e3f                          VBLANK_ON                               ; [082 -01 =081]
                                     ;   - turn off ~VDRAW control line
00021f 6038                          VDRAW_OFF                               ; [081 -01 =080]
                                     ;   - turn off OE/WE lines
000220 9a2a
000221 9a28                          OE_AND_WE_OFF                           ; [080 -01 =079]
000222 c00a                          rjmp after_setup_vblank                 ; [079 -02 =077]
                                 
                                 skip_setup_vblank:
000223 0000
000224 0000
000225 0000
000226 0000
000227 0000
000228 0000
000229 0000
00022a 0000                          _NOP8                                   ;                [087 -08 =079]
00022b 0000
00022c 0000                          _NOP2									;				 [079 -02 =077]
                                 
                                 after_setup_vblank:
                                 
                                     ; 77 cycles of HSYNC left
                                 
                                     ; Load the jump address into Z but don't jump just yet
00022d e3e2                          ldi ZL, LOW(output_mode_jumptable)      ; [077 -01 =076]
00022e e0f2                          ldi ZH, HIGH(output_mode_jumptable)     ; [076 -01 =075]
00022f 0de0                          add ZL, r0                              ; [075 -01 =074]
000230 1df1                          adc ZH, rZERO                           ; [074 -01 =073]
                                 
                                     ; Jump!
000231 9409                          ijmp                                    ; [073 -02 =071]
                                 
                                 output_mode_jumptable:
000232 c00f                          rjmp output_line_vram_direct_6      ; 0
000233 c0d2                          rjmp output_line_vram_direct_5      ; 1
000234 c195                          rjmp output_line_buffer             ; 2
000235 c4eb                          rjmp output_line_dummy              ; 3
000236 c4ea                          rjmp output_line_dummy              ; 4
000237 c4e9                          rjmp output_line_dummy              ; 5
000238 c4e8                          rjmp output_line_dummy              ; 6
000239 c4e7                          rjmp output_line_dummy              ; 7
00023a c4e6                          rjmp output_line_dummy              ; 8
00023b c4e5                          rjmp output_line_dummy              ; 9
00023c c4e4                          rjmp output_line_dummy              ; A
00023d c4e3                          rjmp output_line_dummy              ; B
00023e c4e2                          rjmp output_line_dummy              ; C
00023f c4e1                          rjmp output_line_dummy              ; D
000240 c4e0                          rjmp output_line_dummy              ; E
000241 c4df                          rjmp output_line_dummy              ; F
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;                                                                               ;
                                 ;    #    # #####    ##   #    #         #####  # #####  ######  ####  #####    ;
                                 ;    #    # #    #  #  #  ##  ##         #    # # #    # #      #    #   #      ;
                                 ;    #    # #    # #    # # ## #         #    # # #    # #####  #        #      ;
                                 ;    #    # #####  ###### #    #         #    # # #####  #      #        #      ;
                                 ;     #  #  #   #  #    # #    #         #    # # #   #  #      #    #   #      ;
                                 ;      ##   #    # #    # #    #         #####  # #    # ######  ####    #      ;
                                 ;                                #######                                        ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 output_line_vram_direct_6:
                                 
                                     ; 71 cycles left for sync pulse
                                     ; This can be filled in with whatever additional calculations we care to do.
000242 0000
000243 0000
000244 0000
000245 0000
000246 0000
000247 0000
000248 0000
000249 0000
00024a 0000
00024b 0000
00024c 0000
00024d 0000
00024e 0000
00024f 0000
000250 0000
000251 0000
000252 0000
000253 0000
000254 0000
000255 0000
000256 0000
000257 0000
000258 0000
000259 0000
00025a 0000
00025b 0000
00025c 0000
00025d 0000
00025e 0000
00025f 0000
000260 0000
000261 0000
000262 0000
000263 0000
000264 0000
000265 0000
000266 0000
000267 0000
000268 0000
000269 0000
00026a 0000
00026b 0000
00026c 0000
00026d 0000
00026e 0000
00026f 0000
000270 0000
000271 0000
000272 0000
000273 0000
000274 0000
000275 0000
000276 0000
000277 0000
000278 0000
000279 0000
00027a 0000
00027b 0000
00027c 0000
00027d 0000
00027e 0000
00027f 0000
000280 0000
000281 0000                          _NOP64                                  ; [071 -64 =007]
000282 0000
000283 0000                          _NOP2									; [007 -02 =005]
000284 0000                          nop 									; [005 -01 =004]
                                 
000285 b18b
000286 e890
000287 2789
000288 b98b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                 
                                     ; 92 cycles of breezeway
000289 0000
00028a 0000
00028b 0000
00028c 0000
00028d 0000
00028e 0000
00028f 0000
000290 0000
000291 0000
000292 0000
000293 0000
000294 0000
000295 0000
000296 0000
000297 0000
000298 0000
000299 0000
00029a 0000
00029b 0000
00029c 0000
00029d 0000
00029e 0000
00029f 0000
0002a0 0000
0002a1 0000
0002a2 0000
0002a3 0000
0002a4 0000
0002a5 0000
0002a6 0000
0002a7 0000
0002a8 0000
0002a9 0000
0002aa 0000
0002ab 0000
0002ac 0000
0002ad 0000
0002ae 0000
0002af 0000
0002b0 0000
0002b1 0000
0002b2 0000
0002b3 0000
0002b4 0000
0002b5 0000
0002b6 0000
0002b7 0000
0002b8 0000
0002b9 0000
0002ba 0000
0002bb 0000
0002bc 0000
0002bd 0000
0002be 0000
0002bf 0000
0002c0 0000
0002c1 0000
0002c2 0000
0002c3 0000
0002c4 0000
0002c5 0000
0002c6 0000
0002c7 0000
0002c8 0000                          _NOP64      ; 92 - 64 = 28
0002c9 0000
0002ca 0000
0002cb 0000
0002cc 0000
0002cd 0000
0002ce 0000
0002cf 0000
0002d0 0000
0002d1 0000
0002d2 0000
0002d3 0000
0002d4 0000
0002d5 0000
0002d6 0000
0002d7 0000
0002d8 0000                          _NOP16      ; 28 - 16 = 12
0002d9 0000
0002da 0000
0002db 0000
0002dc 0000
0002dd 0000
0002de 0000
0002df 0000
0002e0 0000                          _NOP8       ; 12 -  8 =  4
0002e1 0000
0002e2 0000
0002e3 0000
0002e4 0000                          _NOP4       ;  4 -  4 =  0
                                 
                                     ; Start Left Border
0002e5 e080                          ldi rTEMP, 0x00
0002e6 b988                          out DATAPORT, rTEMP
0002e7 ef8f
0002e8 b987                          SET_DATA_OUTPUT
                                 
                                     ; Clear X position.
0002e9 24ff                          eor rXPOS, rXPOS
                                 
                                     ; Set HAL to Y position.
0002ea b187
0002eb b198
0002ec ef7f
0002ed b977
0002ee b8e8
0002ef 9a5e
0002f0 985e
0002f1 b998
0002f2 b987                          SET_HAL rYPOS
                                 
                                     ; Set address port to X position.
0002f3 b8f2                          out ADDRPORT, rXPOS
                                 
                                     ; Set max X position
0002f4 eb9c                          ldi rTEMP2, 188
                                 
                                     ; End Left Border
                                     ;_NOP 3
0002f5 e080
0002f6 b987                          SET_DATA_INPUT
                                 
                                     ; Set VRAM0 address enable.
0002f7 985a
0002f8 9a59
0002f9 9858                          ADDRESS_VRAM0
0002fa 982a                          OE_ON
0002fb 982c                          DAC_ENABLE
                                 
                                 pixel_loop_6:
                                     ; Cyc/Pixel Num/Line
                                     ; ========= ========
                                     ;         5      188
                                     ;         4      236
0002fc b8f2                          out ADDRPORT, rXPOS       ; 1
0002fd 94f3                          inc rXPOS                 ; 1
0002fe 16f9                          cp rXPOS, rTEMP2          ; 1
0002ff f7e1                          brne pixel_loop_6         ; 2
                                 
000300 9a2c                          DAC_DISABLE
000301 9a2a                          OE_OFF
000302 985a
000303 9859
000304 9858                          ADDRESS_VDU
                                 
000305 c4c5                          rjmp end_line
                                 
                                 output_line_vram_direct_5:
                                 
                                     ; 71 cycles left for sync pulse
                                     ; This can be filled in with whatever additional calculations we care to do.
000306 0000
000307 0000
000308 0000
000309 0000
00030a 0000
00030b 0000
00030c 0000
00030d 0000
00030e 0000
00030f 0000
000310 0000
000311 0000
000312 0000
000313 0000
000314 0000
000315 0000
000316 0000
000317 0000
000318 0000
000319 0000
00031a 0000
00031b 0000
00031c 0000
00031d 0000
00031e 0000
00031f 0000
000320 0000
000321 0000
000322 0000
000323 0000
000324 0000
000325 0000
000326 0000
000327 0000
000328 0000
000329 0000
00032a 0000
00032b 0000
00032c 0000
00032d 0000
00032e 0000
00032f 0000
000330 0000
000331 0000
000332 0000
000333 0000
000334 0000
000335 0000
000336 0000
000337 0000
000338 0000
000339 0000
00033a 0000
00033b 0000
00033c 0000
00033d 0000
00033e 0000
00033f 0000
000340 0000
000341 0000
000342 0000
000343 0000
000344 0000
000345 0000                          _NOP64                                  ; [071 -64 =007]
000346 0000
000347 0000                          _NOP2									; [007 -02 =005]
000348 0000                          nop 									; [005 -01 =004]
                                 
000349 b18b
00034a e890
00034b 2789
00034c b98b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                 
                                     ; 92 cycles of breezeway
00034d 0000
00034e 0000
00034f 0000
000350 0000
000351 0000
000352 0000
000353 0000
000354 0000
000355 0000
000356 0000
000357 0000
000358 0000
000359 0000
00035a 0000
00035b 0000
00035c 0000
00035d 0000
00035e 0000
00035f 0000
000360 0000
000361 0000
000362 0000
000363 0000
000364 0000
000365 0000
000366 0000
000367 0000
000368 0000
000369 0000
00036a 0000
00036b 0000
00036c 0000
00036d 0000
00036e 0000
00036f 0000
000370 0000
000371 0000
000372 0000
000373 0000
000374 0000
000375 0000
000376 0000
000377 0000
000378 0000
000379 0000
00037a 0000
00037b 0000
00037c 0000
00037d 0000
00037e 0000
00037f 0000
000380 0000
000381 0000
000382 0000
000383 0000
000384 0000
000385 0000
000386 0000
000387 0000
000388 0000
000389 0000
00038a 0000
00038b 0000
00038c 0000                          _NOP64      ; 92 - 64 = 28
00038d 0000
00038e 0000
00038f 0000
000390 0000
000391 0000
000392 0000
000393 0000
000394 0000
000395 0000
000396 0000
000397 0000
000398 0000
000399 0000
00039a 0000
00039b 0000
00039c 0000                          _NOP16      ; 28 - 16 = 12
00039d 0000
00039e 0000
00039f 0000
0003a0 0000
0003a1 0000
0003a2 0000
0003a3 0000
0003a4 0000                          _NOP8       ; 12 -  8 =  4
0003a5 0000
0003a6 0000
0003a7 0000
0003a8 0000                          _NOP4       ;  4 -  4 =  0
                                 
                                     ; Start Left Border
0003a9 e080                          ldi rTEMP, 0x00
0003aa b988                          out DATAPORT, rTEMP
0003ab ef8f
0003ac b987                          SET_DATA_OUTPUT
0003ad 982c                          DAC_ENABLE
                                 
                                     ; Clear X position.
0003ae 24ff                          eor rXPOS, rXPOS
                                 
                                     ; Set HAL to Y position.
0003af b187
0003b0 b198
0003b1 ef7f
0003b2 b977
0003b3 b8e8
0003b4 9a5e
0003b5 985e
0003b6 b998
0003b7 b987                          SET_HAL rYPOS
                                 
                                     ; Set address port to X position.
0003b8 b8f2                          out ADDRPORT, rXPOS
                                 
                                     ; Set max X position
0003b9 ee8c
0003ba 2ef8                          _LDI rXPOS, 236
                                 
                                     ; End Left Border
                                     ;_NOP 40
0003bb e080
0003bc b987                          SET_DATA_INPUT
                                 
                                     ; Set VRAM0 address enable.
0003bd 985a
0003be 9a59
0003bf 9858                          ADDRESS_VRAM0
0003c0 982a                          OE_ON
                                 
                                 pixel_loop_5:
0003c1 94fa                          dec rXPOS
0003c2 b8f2                          out ADDRPORT, rXPOS
0003c3 f7e9                          brne pixel_loop_5
                                 
0003c4 9a2c                          DAC_DISABLE
0003c5 9a2a                          OE_OFF
0003c6 985a
0003c7 9859
0003c8 9858                          ADDRESS_VDU
                                 
0003c9 c401                          rjmp end_line
                                 
                                 output_line_buffer:
                                 
                                 ; Inputs:
                                 ;   [YH:YL] points to the tile we want.
                                 ;   [ZH:rTILEGRAFL] points to the graphic data for this line.   
                                 ; Outputs:
                                 ;   rTILEBG is the tile's background color.
                                 ;   rTILEFG is the tile's foreground color.
                                 ;   rTEMP contains the 8 pixels making up the tile.
                                 ; Effects:
                                 ;   [YH:YL] is incremented by 3
                                 ; Clobbers:
                                 ;   rTILEINDEX, ZL
                                 ; Cycles:
                                 ;   10
                                 .MACRO READ_8_PIXELS
                                     ld rTILEINDEX, Y+               ; +2
                                     ld rTILEBG, Y+                  ; +2
                                     ld rTILEFG, Y+                  ; +2
                                     mov ZL, rTILEGRAFL              ; +1
                                     add ZL, rTILEINDEX              ; +1
                                     ; Load 8 pixels of data into rTEMP.
                                     ld rTEMP, Z                     ; +2
                                 .ENDM
                                 
                                 ; Inputs:
                                 ;   [XH:XL] points to the line buffer we're writing to.
                                 ;   rTILEBG is the tile's background color.
                                 ;   rTILEFG is the tile's foreground color.
                                 ;   @0 is the bit we want to write.
                                 ; Output:
                                 ;   None
                                 ; Effects:
                                 ;   Byte is written to the line buffer pointed to by [XH:XL].
                                 ;   [XH:XL] is incremented by 1.
                                 ; Clobbers:
                                 ;   rTILEOUT
                                 ; Cycles:
                                 ;   5
                                 .MACRO WRITE_PIXEL
                                     mov rTILEOUT, rTILEBG           ; +1
                                     sbrc rTEMP, @0                  ; +2
                                     mov rTILEOUT, rTILEFG           ; ...
                                     st X+, rTILEOUT                 ; +2    
                                 .ENDM
                                 
                                 .MACRO LOAD_8_PIXELS    ; 50 cycles... ouch. WAAAAAY too many
                                     READ_8_PIXELS
                                     WRITE_PIXEL 7
                                     WRITE_PIXEL 6
                                     WRITE_PIXEL 5
                                     WRITE_PIXEL 4
                                     WRITE_PIXEL 3
                                     WRITE_PIXEL 2
                                     WRITE_PIXEL 1
                                     WRITE_PIXEL 0
                                 .ENDM
                                 
                                     ; 71 cycles left for sync pulse
0003ca e080                          ldi rTEMP, 0x00                 ; -1 = 70
0003cb b988                          out DATAPORT, rTEMP             ; -1 = 69
0003cc ef8f
0003cd b987                          SET_DATA_OUTPUT                 ; -2 = 67
                                 
                                     ; Calculate the line number and add to the tile graphic address.
0003ce 2df3                          mov ZH, rTILEGRAFH              ; -1 = 66
0003cf 2d8e                          mov rTEMP, rYPOS                ; -1 = 65
0003d0 7087                          andi rTEMP, 0x07                ; -1 = 64
0003d1 0ff8                          add ZH, rTEMP                   ; -1 = 63
                                 
                                     ; Load tile grid offset into Y register.
0003d2 e2b4                          ldi XH, HIGH(tile_grid_offset)          ; -1 = 62
0003d3 e0a0                          ldi XL, LOW(tile_grid_offset)           ; -1 = 61
0003d4 91dd                          ld YH, X+                               ; -2 = 59
0003d5 91cd                          ld YL, X+                               ; -2 = 57
                                 
                                     ; Add tile grid address to tile grid offset to get actual address.
0003d6 0dc4                          add YL, rTILEGRIDL                      ; -1 = 56
0003d7 1dd5                          adc YH, rTILEGRIDH                      ; -1 = 55
                                 
                                     ; Load read buffer address into X register.
0003d8 2db7                          mov XH, rREADBUFH                      ; -1 = 54
0003d9 2da6                          mov XL, rREADBUFL                      ; -1 = 53
                                 
0003da 90a9
0003db 90b9
0003dc 90c9
0003dd 2de2
0003de 0dea
0003df 8180
0003e0 2cdb
0003e1 fd87
0003e2 2cdc
0003e3 92dd
0003e4 2cdb
0003e5 fd86
0003e6 2cdc
0003e7 92dd
0003e8 2cdb
0003e9 fd85
0003ea 2cdc
0003eb 92dd
0003ec 2cdb
0003ed fd84
0003ee 2cdc
0003ef 92dd
0003f0 2cdb
0003f1 fd83
0003f2 2cdc
0003f3 92dd
0003f4 2cdb
0003f5 fd82
0003f6 2cdc
0003f7 92dd
0003f8 2cdb
0003f9 fd81
0003fa 2cdc
0003fb 92dd
0003fc 2cdb
0003fd fd80
0003fe 2cdc
0003ff 92dd                          LOAD_8_PIXELS                          ; -50 = 3
                                 
000400 b18b
000401 e890
000402 2789
000403 b98b                          IMMED_TOGGLE_SYNC_PIN                   ; [003 -04 = whatever, close enough]
                                 
                                     ; 92 cycles of breezeway
                                     
                                     ; At this point we have 92 cycles of breezeway + 108 cycles of border = 200 cycles (as far as I'm concerned)
                                 
000404 90a9
000405 90b9
000406 90c9
000407 2de2
000408 0dea
000409 8180
00040a 2cdb
00040b fd87
00040c 2cdc
00040d 92dd
00040e 2cdb
00040f fd86
000410 2cdc
000411 92dd
000412 2cdb
000413 fd85
000414 2cdc
000415 92dd
000416 2cdb
000417 fd84
000418 2cdc
000419 92dd
00041a 2cdb
00041b fd83
00041c 2cdc
00041d 92dd
00041e 2cdb
00041f fd82
000420 2cdc
000421 92dd
000422 2cdb
000423 fd81
000424 2cdc
000425 92dd
000426 2cdb
000427 fd80
000428 2cdc
000429 92dd                          LOAD_8_PIXELS       ; -50
00042a 90a9
00042b 90b9
00042c 90c9
00042d 2de2
00042e 0dea
00042f 8180
000430 2cdb
000431 fd87
000432 2cdc
000433 92dd
000434 2cdb
000435 fd86
000436 2cdc
000437 92dd
000438 2cdb
000439 fd85
00043a 2cdc
00043b 92dd
00043c 2cdb
00043d fd84
00043e 2cdc
00043f 92dd
000440 2cdb
000441 fd83
000442 2cdc
000443 92dd
000444 2cdb
000445 fd82
000446 2cdc
000447 92dd
000448 2cdb
000449 fd81
00044a 2cdc
00044b 92dd
00044c 2cdb
00044d fd80
00044e 2cdc
00044f 92dd                          LOAD_8_PIXELS       ; -50
                                 
000450 982c                          DAC_ENABLE
                                 
000451 90a9
000452 90b9
000453 90c9
000454 2de2
000455 0dea
000456 8180
000457 2cdb
000458 fd87
000459 2cdc
00045a 92dd
00045b 2cdb
00045c fd86
00045d 2cdc
00045e 92dd
00045f 2cdb
000460 fd85
000461 2cdc
000462 92dd
000463 2cdb
000464 fd84
000465 2cdc
000466 92dd
000467 2cdb
000468 fd83
000469 2cdc
00046a 92dd
00046b 2cdb
00046c fd82
00046d 2cdc
00046e 92dd
00046f 2cdb
000470 fd81
000471 2cdc
000472 92dd
000473 2cdb
000474 fd80
000475 2cdc
000476 92dd                          LOAD_8_PIXELS       ; -50
000477 90a9
000478 90b9
000479 90c9
00047a 2de2
00047b 0dea
00047c 8180
00047d 2cdb
00047e fd87
00047f 2cdc
000480 92dd
000481 2cdb
000482 fd86
000483 2cdc
000484 92dd
000485 2cdb
000486 fd85
000487 2cdc
000488 92dd
000489 2cdb
00048a fd84
00048b 2cdc
00048c 92dd
00048d 2cdb
00048e fd83
00048f 2cdc
000490 92dd
000491 2cdb
000492 fd82
000493 2cdc
000494 92dd
000495 2cdb
000496 fd81
000497 2cdc
000498 92dd
000499 2cdb
00049a fd80
00049b 2cdc
00049c 92dd                          LOAD_8_PIXELS       ; -50
                                 
                                     ; Reload line buffer address into X register.
00049d 2db7                          mov XH, rREADBUFH       ; -1
00049e 2da6                          mov XL, rREADBUFL       ; -1
                                 
                                     ; Typical pixel (4 clocks):
                                     ; mov rOUT, rTILEBG
                                     ; sbrc rDATA, bit
                                     ; mov rOUT, rTILEFG
                                     ; out DATAPORT, rOUT
                                     ; Gives only 1 clock left over for other stuff. Yikes. Not... good.
                                 
                                 .MACRO OUT_PIXEL
                                     nop                     ; [1]
                                     nop                     ; [1]
                                     ld rTEMP, X+            ; [2]
                                     out DATAPORT, rTEMP     ; [1]
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL2
                                     OUT_PIXEL
                                     OUT_PIXEL
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL4
                                     OUT_PIXEL2
                                     OUT_PIXEL2
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL8
                                     OUT_PIXEL4
                                     OUT_PIXEL4
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL16
                                     OUT_PIXEL8
                                     OUT_PIXEL8
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL32
                                     OUT_PIXEL16
                                     OUT_PIXEL16
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL64
                                     OUT_PIXEL32
                                     OUT_PIXEL32
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL128
                                     OUT_PIXEL64
                                     OUT_PIXEL64
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL256
                                     OUT_PIXEL128
                                     OUT_PIXEL128
                                 .ENDM
                                 
                                     ; Output 160 pixels.
00049f 0000
0004a0 0000
0004a1 918d
0004a2 b988
0004a3 0000
0004a4 0000
0004a5 918d
0004a6 b988
0004a7 0000
0004a8 0000
0004a9 918d
0004aa b988
0004ab 0000
0004ac 0000
0004ad 918d
0004ae b988
0004af 0000
0004b0 0000
0004b1 918d
0004b2 b988
0004b3 0000
0004b4 0000
0004b5 918d
0004b6 b988
0004b7 0000
0004b8 0000
0004b9 918d
0004ba b988
0004bb 0000
0004bc 0000
0004bd 918d
0004be b988
0004bf 0000
0004c0 0000
0004c1 918d
0004c2 b988
0004c3 0000
0004c4 0000
0004c5 918d
0004c6 b988
0004c7 0000
0004c8 0000
0004c9 918d
0004ca b988
0004cb 0000
0004cc 0000
0004cd 918d
0004ce b988
0004cf 0000
0004d0 0000
0004d1 918d
0004d2 b988
0004d3 0000
0004d4 0000
0004d5 918d
0004d6 b988
0004d7 0000
0004d8 0000
0004d9 918d
0004da b988
0004db 0000
0004dc 0000
0004dd 918d
0004de b988
0004df 0000
0004e0 0000
0004e1 918d
0004e2 b988
0004e3 0000
0004e4 0000
0004e5 918d
0004e6 b988
0004e7 0000
0004e8 0000
0004e9 918d
0004ea b988
0004eb 0000
0004ec 0000
0004ed 918d
0004ee b988
0004ef 0000
0004f0 0000
0004f1 918d
0004f2 b988
0004f3 0000
0004f4 0000
0004f5 918d
0004f6 b988
0004f7 0000
0004f8 0000
0004f9 918d
0004fa b988
0004fb 0000
0004fc 0000
0004fd 918d
0004fe b988
0004ff 0000
000500 0000
000501 918d
000502 b988
000503 0000
000504 0000
000505 918d
000506 b988
000507 0000
000508 0000
000509 918d
00050a b988
00050b 0000
00050c 0000
00050d 918d
00050e b988
00050f 0000
000510 0000
000511 918d
000512 b988
000513 0000
000514 0000
000515 918d
000516 b988
000517 0000
000518 0000
000519 918d
00051a b988
00051b 0000
00051c 0000
00051d 918d
00051e b988
00051f 0000
000520 0000
000521 918d
000522 b988
000523 0000
000524 0000
000525 918d
000526 b988
000527 0000
000528 0000
000529 918d
00052a b988
00052b 0000
00052c 0000
00052d 918d
00052e b988
00052f 0000
000530 0000
000531 918d
000532 b988
000533 0000
000534 0000
000535 918d
000536 b988
000537 0000
000538 0000
000539 918d
00053a b988
00053b 0000
00053c 0000
00053d 918d
00053e b988
00053f 0000
000540 0000
000541 918d
000542 b988
000543 0000
000544 0000
000545 918d
000546 b988
000547 0000
000548 0000
000549 918d
00054a b988
00054b 0000
00054c 0000
00054d 918d
00054e b988
00054f 0000
000550 0000
000551 918d
000552 b988
000553 0000
000554 0000
000555 918d
000556 b988
000557 0000
000558 0000
000559 918d
00055a b988
00055b 0000
00055c 0000
00055d 918d
00055e b988
00055f 0000
000560 0000
000561 918d
000562 b988
000563 0000
000564 0000
000565 918d
000566 b988
000567 0000
000568 0000
000569 918d
00056a b988
00056b 0000
00056c 0000
00056d 918d
00056e b988
00056f 0000
000570 0000
000571 918d
000572 b988
000573 0000
000574 0000
000575 918d
000576 b988
000577 0000
000578 0000
000579 918d
00057a b988
00057b 0000
00057c 0000
00057d 918d
00057e b988
00057f 0000
000580 0000
000581 918d
000582 b988
000583 0000
000584 0000
000585 918d
000586 b988
000587 0000
000588 0000
000589 918d
00058a b988
00058b 0000
00058c 0000
00058d 918d
00058e b988
00058f 0000
000590 0000
000591 918d
000592 b988
000593 0000
000594 0000
000595 918d
000596 b988
000597 0000
000598 0000
000599 918d
00059a b988
00059b 0000
00059c 0000
00059d 918d
00059e b988
00059f 0000
0005a0 0000
0005a1 918d
0005a2 b988
0005a3 0000
0005a4 0000
0005a5 918d
0005a6 b988
0005a7 0000
0005a8 0000
0005a9 918d
0005aa b988
0005ab 0000
0005ac 0000
0005ad 918d
0005ae b988
0005af 0000
0005b0 0000
0005b1 918d
0005b2 b988
0005b3 0000
0005b4 0000
0005b5 918d
0005b6 b988
0005b7 0000
0005b8 0000
0005b9 918d
0005ba b988
0005bb 0000
0005bc 0000
0005bd 918d
0005be b988
0005bf 0000
0005c0 0000
0005c1 918d
0005c2 b988
0005c3 0000
0005c4 0000
0005c5 918d
0005c6 b988
0005c7 0000
0005c8 0000
0005c9 918d
0005ca b988
0005cb 0000
0005cc 0000
0005cd 918d
0005ce b988
0005cf 0000
0005d0 0000
0005d1 918d
0005d2 b988
0005d3 0000
0005d4 0000
0005d5 918d
0005d6 b988
0005d7 0000
0005d8 0000
0005d9 918d
0005da b988
0005db 0000
0005dc 0000
0005dd 918d
0005de b988
0005df 0000
0005e0 0000
0005e1 918d
0005e2 b988
0005e3 0000
0005e4 0000
0005e5 918d
0005e6 b988
0005e7 0000
0005e8 0000
0005e9 918d
0005ea b988
0005eb 0000
0005ec 0000
0005ed 918d
0005ee b988
0005ef 0000
0005f0 0000
0005f1 918d
0005f2 b988
0005f3 0000
0005f4 0000
0005f5 918d
0005f6 b988
0005f7 0000
0005f8 0000
0005f9 918d
0005fa b988
0005fb 0000
0005fc 0000
0005fd 918d
0005fe b988
0005ff 0000
000600 0000
000601 918d
000602 b988
000603 0000
000604 0000
000605 918d
000606 b988
000607 0000
000608 0000
000609 918d
00060a b988
00060b 0000
00060c 0000
00060d 918d
00060e b988
00060f 0000
000610 0000
000611 918d
000612 b988
000613 0000
000614 0000
000615 918d
000616 b988
000617 0000
000618 0000
000619 918d
00061a b988
00061b 0000
00061c 0000
00061d 918d
00061e b988
00061f 0000
000620 0000
000621 918d
000622 b988
000623 0000
000624 0000
000625 918d
000626 b988
000627 0000
000628 0000
000629 918d
00062a b988
00062b 0000
00062c 0000
00062d 918d
00062e b988
00062f 0000
000630 0000
000631 918d
000632 b988
000633 0000
000634 0000
000635 918d
000636 b988
000637 0000
000638 0000
000639 918d
00063a b988
00063b 0000
00063c 0000
00063d 918d
00063e b988
00063f 0000
000640 0000
000641 918d
000642 b988
000643 0000
000644 0000
000645 918d
000646 b988
000647 0000
000648 0000
000649 918d
00064a b988
00064b 0000
00064c 0000
00064d 918d
00064e b988
00064f 0000
000650 0000
000651 918d
000652 b988
000653 0000
000654 0000
000655 918d
000656 b988
000657 0000
000658 0000
000659 918d
00065a b988
00065b 0000
00065c 0000
00065d 918d
00065e b988
00065f 0000
000660 0000
000661 918d
000662 b988
000663 0000
000664 0000
000665 918d
000666 b988
000667 0000
000668 0000
000669 918d
00066a b988
00066b 0000
00066c 0000
00066d 918d
00066e b988
00066f 0000
000670 0000
000671 918d
000672 b988
000673 0000
000674 0000
000675 918d
000676 b988
000677 0000
000678 0000
000679 918d
00067a b988
00067b 0000
00067c 0000
00067d 918d
00067e b988
00067f 0000
000680 0000
000681 918d
000682 b988
000683 0000
000684 0000
000685 918d
000686 b988
000687 0000
000688 0000
000689 918d
00068a b988
00068b 0000
00068c 0000
00068d 918d
00068e b988
00068f 0000
000690 0000
000691 918d
000692 b988
000693 0000
000694 0000
000695 918d
000696 b988
000697 0000
000698 0000
000699 918d
00069a b988
00069b 0000
00069c 0000
00069d 918d
00069e b988                          OUT_PIXEL128
00069f 0000
0006a0 0000
0006a1 918d
0006a2 b988
0006a3 0000
0006a4 0000
0006a5 918d
0006a6 b988
0006a7 0000
0006a8 0000
0006a9 918d
0006aa b988
0006ab 0000
0006ac 0000
0006ad 918d
0006ae b988
0006af 0000
0006b0 0000
0006b1 918d
0006b2 b988
0006b3 0000
0006b4 0000
0006b5 918d
0006b6 b988
0006b7 0000
0006b8 0000
0006b9 918d
0006ba b988
0006bb 0000
0006bc 0000
0006bd 918d
0006be b988
0006bf 0000
0006c0 0000
0006c1 918d
0006c2 b988
0006c3 0000
0006c4 0000
0006c5 918d
0006c6 b988
0006c7 0000
0006c8 0000
0006c9 918d
0006ca b988
0006cb 0000
0006cc 0000
0006cd 918d
0006ce b988
0006cf 0000
0006d0 0000
0006d1 918d
0006d2 b988
0006d3 0000
0006d4 0000
0006d5 918d
0006d6 b988
0006d7 0000
0006d8 0000
0006d9 918d
0006da b988
0006db 0000
0006dc 0000
0006dd 918d
0006de b988
0006df 0000
0006e0 0000
0006e1 918d
0006e2 b988
0006e3 0000
0006e4 0000
0006e5 918d
0006e6 b988
0006e7 0000
0006e8 0000
0006e9 918d
0006ea b988
0006eb 0000
0006ec 0000
0006ed 918d
0006ee b988
0006ef 0000
0006f0 0000
0006f1 918d
0006f2 b988
0006f3 0000
0006f4 0000
0006f5 918d
0006f6 b988
0006f7 0000
0006f8 0000
0006f9 918d
0006fa b988
0006fb 0000
0006fc 0000
0006fd 918d
0006fe b988
0006ff 0000
000700 0000
000701 918d
000702 b988
000703 0000
000704 0000
000705 918d
000706 b988
000707 0000
000708 0000
000709 918d
00070a b988
00070b 0000
00070c 0000
00070d 918d
00070e b988
00070f 0000
000710 0000
000711 918d
000712 b988
000713 0000
000714 0000
000715 918d
000716 b988
000717 0000
000718 0000
000719 918d
00071a b988
00071b 0000
00071c 0000
00071d 918d
00071e b988                          OUT_PIXEL32
00071f 9a2c                          DAC_DISABLE
                                 
                                     ; Here we have 128 cycles to prepare the next line.
                                 
                                     ; Tiles are stored at tile_grid as a 32x32 grid -- so the location of one tile is at offset 000000YY YYYXXXXX.
                                     ;mov YH, rLINECOUNTER            ; -1 = 127
                                     ;ldi YL, 0                       ; -1 = 126
                                     ;lsr YH                          ; -1 = 125  ; 0YYYYYYY 00000000
                                     ;lsr YH                          ; -1 = 124  ; 00YYYYYY 00000000
                                     ;lsr YH                          ; -1 = 123  ; 000YYYYY 00000000
                                     ;lsr YH                          ; -1 = 122  
                                     ;ror YL                          ; -1 = 121  ; 0000YYYY Y0000000
                                     ;lsr YH                          ; -1 = 120  
                                     ;ror YL                          ; -1 = 119  ; 00000YYY YY000000
                                     ;lsr YH                          ; -1 = 118  
                                     ;ror YL                          ; -1 = 117  ; 000000YY YYY00000
                                     ;ldi XH, HIGH(tile_grid_offset)  ; -1 = 116
                                     ;ldi XL, LOW(tile_grid_offset)   ; -1 = 115
                                     ;st X+, YH                       ; -2 = 113
                                     ;st X+, YL                       ; -2 = 111
                                 
000720 c0aa                          rjmp end_line
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;                                         ;
                                 ;    #####  #    # #    # #    # #   #    ;
                                 ;    #    # #    # ##  ## ##  ##  # #     ;
                                 ;    #    # #    # # ## # # ## #   #      ;
                                 ;    #    # #    # #    # #    #   #      ;
                                 ;    #    # #    # #    # #    #   #      ;
                                 ;    #####   ####  #    # #    #   #      ;
                                 ;                                         ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 output_line_dummy:
                                 
                                     ; 64 cycles left for sync pulse
                                     ; This can be filled in with whatever additional calculations we care to do.
000721 0000
000722 0000
000723 0000
000724 0000
000725 0000
000726 0000
000727 0000
000728 0000
000729 0000
00072a 0000
00072b 0000
00072c 0000
00072d 0000
00072e 0000
00072f 0000
000730 0000
000731 0000
000732 0000
000733 0000
000734 0000
000735 0000
000736 0000
000737 0000
000738 0000
000739 0000
00073a 0000
00073b 0000
00073c 0000
00073d 0000
00073e 0000
00073f 0000
000740 0000                          _NOP32                                  ; [064 -32 =032]
000741 0000
000742 0000
000743 0000
000744 0000
000745 0000
000746 0000
000747 0000
000748 0000
000749 0000
00074a 0000
00074b 0000
00074c 0000
00074d 0000
00074e 0000
00074f 0000
000750 0000                          _NOP16									; [032 -16 =016]
000751 0000
000752 0000
000753 0000
000754 0000
000755 0000
000756 0000
000757 0000
000758 0000                          _NOP8									; [016 -08 =008]
000759 0000
00075a 0000
00075b 0000
00075c 0000                          _NOP4                                   ; [008 -04 =004]
                                 
00075d b18b
00075e e890
00075f 2789
000760 b98b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                 
000761 c069                          rjmp end_line
                                 
                                 ;d8888b. db       .d8b.  d8b   db db   dD d888888b d8b   db  d888b
                                 ;88  `8D 88      d8' `8b 888o  88 88 ,8P'   `88'   888o  88 88' Y8b
                                 ;88oooY' 88      88ooo88 88V8o 88 88,8P      88    88V8o 88 88
                                 ;88~~~b. 88      88~~~88 88 V8o88 88`8b      88    88 V8o88 88  ooo
                                 ;88   8D 88booo. 88   88 88  V888 88 `88.   .88.   88  V888 88. ~8~
                                 ;Y8888P' Y88888P YP   YP VP   V8P YP   YD Y888888P VP   V8P  Y888P
                                 
                                 non_display_line:
                                     ; 91 cycles of HSYNC left
                                 
                                     ; Of the 22 OR 23 non-display lines:
                                     ; 00-01: Bottom border lines
                                     ; 02-04: Pre-render blanking lines
                                     ; 05-07: VSYNC lines
                                     ; 08-21: Post-render blanking lines
                                     ; 22: Post-render blanking line on ODD frames only
                                 
                                     ; Load the jump address into Z but don't jump just yet
                                 ;    ldi ZL, LOW(non_display_line_table)       ; [091 -01 =090]
                                 ;    ldi ZH, HIGH(non_display_line_table)      ; [090 -01 =089]
                                 ;    add ZL, rLINECOUNTER                      ; [089 -01 =088]
                                 ;    adc ZH, rZERO                             ; [088 -01 =087]
000762 0000
000763 0000
000764 0000
000765 0000                          _NOP4 ; TEMPORARY
                                 
                                     ; If this is line 04, toggle SYNC for the next line.
000766 3014                          cpi rLINECOUNTER, 4                       ; [087 -01 =086]
                                                                             ; [     ==     ] [     !=     ]
000767 f419                          brne skip_set_vsync                       ; [086 -01 =085] [086 -02 =084]
                                 set_vsync:
000768 e880
000769 2738                          TOGGLE_SYNC_BIT                           ; [085 -02 =083]
00076a c003                          rjmp after_set_vsync                      ; [083 -02 =081]
                                 skip_set_vsync:
00076b 0000
00076c 0000                          _NOP2                                     ;                [084 -02 =082]
00076d 0000                          nop										;				 [082 -01 =081]
                                 after_set_vsync:
                                 
                                     ; If this is line 07, toggle SYNC for the next line.
00076e 3017                          cpi rLINECOUNTER, 7                       ; [081 -01 =080]
                                                                             ; [     ==     ] [     !=     ]
00076f f419                          brne skip_clear_vsync                     ; [080 -01 =079] [080 -02 =078]
                                 clear_vsync:
000770 e880
000771 2738                          TOGGLE_SYNC_BIT                           ; [079 -02 =077]
000772 c003                          rjmp after_clear_vsync                    ; [077 -02 =075]
                                 skip_clear_vsync:
000773 0000
000774 0000                          _NOP2                                     ;                [078 -02 =076]
000775 0000                          nop										;				 [076 -01 =075]
                                 after_clear_vsync:
                                 
                                     ; Increment rLINECOUNTER by one.
000776 9513                          inc rLINECOUNTER                          ; [075 -01 =074]
                                 
                                     ; Load 22 into the temp register.
000777 e186                          ldi rTEMP, 22                             ; [074 -01 =073]
                                 
                                     ; If rSTATBITS:EVENFRAME is clear, add 1 to the temp register.
000778 ff20                          sbrs rSTATBITS, STATBIT_EVENFRAME         ; [073 -02 =071]
000779 9583                          inc rTEMP
                                 
                                     ; If line counter is equal to temp register:
                                     ;   - reset to 0
                                     ;   - set rSTATBITS:DISP for next line
                                     ;   - set ~VBLANK control line
                                     ;   - set DATA lines to input (we ONLY do output when writing)
                                     ;   - set ADDR/CTL2 lines to outputs
                                     ;   - clear ~OE, ~WE bits
                                     ;   - clear ~VDRAW control line if rSTATBITS:EVENFRAME is clear
00077a 1718                          cp rLINECOUNTER, rTEMP                    ; [071 -01 =070]
                                                                             ; [     ==     ] [     !=     ]
00077b f451                          brne skip_setup_display                   ; [070 -01 =069] [070 -02 =068]
                                 
                                 ;d888888b d8b   db d888888b d888888b   d8888b. d888888b .d8888. d8888b.
                                 ;  `88'   888o  88   `88'   `~~88~~'   88  `8D   `88'   88'  YP 88  `8D
                                 ;   88    88V8o 88    88       88      88   88    88    `8bo.   88oodD'
                                 ;   88    88 V8o88    88       88      88   88    88      `Y8b. 88~~~
                                 ;  .88.   88  V888   .88.      88      88  .8D   .88.   db   8D 88
                                 ;Y888888P VP   V8P Y888888P    YP      Y8888D' Y888888P `8888Y' 88
                                 
                                 setup_display:
00077c 2711                          eor rLINECOUNTER, rLINECOUNTER            ; [069 -01 =068]
00077d 6820                          ori rSTATBITS, STATBIT_DISP_MASK          ; [068 -01 =067]
00077e 6130                          ori rCTRLBITS, VBLANKBIT_MASK             ; [067 -01 =066]
00077f ef4f                          ldi rADDRDDR, ADDRBIT_DDR_OUTPUT          ; [066 -01 =065]
000780 e050                          ldi rDATADDR, DATABIT_DDR_INPUT           ; [065 -01 =064]
000781 9a2a
000782 9a28                          OE_AND_WE_OFF                             ; [064 -02 =062]
000783 ff20                          sbrs rSTATBITS, STATBIT_EVENFRAME         ; [062 -02 =060]
000784 7f37                          andi rCTRLBITS, NOT_VDRAWBIT_MASK
000785 c00a                          rjmp after_setup_display                  ; [060 -02 =058]
                                 skip_setup_display:
000786 0000
000787 0000
000788 0000
000789 0000
00078a 0000
00078b 0000
00078c 0000
00078d 0000                          _NOP8                                     ;                [068 -08 =060]
00078e 0000
00078f 0000                          _NOP2                                     ;                [060 -02 =058]
                                 after_setup_display:
                                 
                                     ; Finish the H-sync pulse here.
                                     ; This can be filled in with whatever calculations we care to do.
000790 0000
000791 0000
000792 0000
000793 0000
000794 0000
000795 0000
000796 0000
000797 0000
000798 0000
000799 0000
00079a 0000
00079b 0000
00079c 0000
00079d 0000
00079e 0000
00079f 0000
0007a0 0000
0007a1 0000
0007a2 0000
0007a3 0000
0007a4 0000
0007a5 0000
0007a6 0000
0007a7 0000
0007a8 0000
0007a9 0000
0007aa 0000
0007ab 0000
0007ac 0000
0007ad 0000
0007ae 0000
0007af 0000                          _NOP32									; [058 -32 =026]
0007b0 0000
0007b1 0000
0007b2 0000
0007b3 0000
0007b4 0000
0007b5 0000
0007b6 0000
0007b7 0000
0007b8 0000
0007b9 0000
0007ba 0000
0007bb 0000
0007bc 0000
0007bd 0000
0007be 0000
0007bf 0000                          _NOP16                                    ; [026 -16 =010]
0007c0 0000
0007c1 0000
0007c2 0000
0007c3 0000                          _NOP4                                     ; [010 -04 =006]
0007c4 0000
0007c5 0000                          _NOP2                                     ; [006 -02 =004]
0007c6 b18b
0007c7 e890
0007c8 2789
0007c9 b98b                          IMMED_TOGGLE_SYNC_PIN                     ; [004 -04 =000]
                                 
                                     ; continue here if not a display line
0007ca c000                          rjmp end_line ; -- TEMPORARY
                                 
                                 ;    ; Jump based on exactly which line this is
                                 ;    ijmp                                      ; [2]
                                 ;
                                 ;non_display_line_table:                         ; [2] for one of below jumps
                                 ;    rjmp bottom_border_line             ; 0
                                 ;    rjmp bottom_border_line             ; 1
                                 ;    rjmp pre_render_blanking_line       ; 2
                                 ;    rjmp pre_render_blanking_line       ; 3
                                 ;    rjmp pre_render_blanking_line       ; 4
                                 ;    rjmp vsync_line                     ; 5
                                 ;    rjmp vsync_line                     ; 6
                                 ;    rjmp vsync_line                     ; 7
                                 ;    rjmp post_render_blanking_line      ; 8
                                 ;    rjmp post_render_blanking_line      ; 9
                                 ;    rjmp post_render_blanking_line      ; 10
                                 ;    rjmp post_render_blanking_line      ; 11
                                 ;    rjmp post_render_blanking_line      ; 12
                                 ;    rjmp post_render_blanking_line      ; 13
                                 ;    rjmp post_render_blanking_line      ; 14
                                 ;    rjmp post_render_blanking_line      ; 15
                                 ;    rjmp post_render_blanking_line      ; 16
                                 ;    rjmp post_render_blanking_line      ; 17
                                 ;    rjmp post_render_blanking_line      ; 18
                                 ;    rjmp post_render_blanking_line      ; 19
                                 ;    rjmp post_render_blanking_line      ; 20
                                 ;    rjmp post_render_blanking_line      ; 21
                                 ;    rjmp post_render_blanking_line      ; 22 (for odd frames)
                                 ;
                                 ;    ; +4 cycles after HSYNC here (for whichever branch is taken)
                                 ;bottom_border_line:
                                 ;pre_render_blanking_line:
                                 ;vsync_line:
                                 ;post_render_blanking_line:
                                 ;
                                 ;    rjmp end_line                       ; [2]
                                 
                                 end_line:
0007cb 0000                          nop
0007cc 9518                          reti
                                 
                                 INT0_vect:
0007cd 6860                            SET_ERROR_DEBUG_BIT
0007ce b188
0007cf 938f
0007d0 b187
0007d1 938f
0007d2 ef8f
0007d3 b987
0007d4 b968
0007d5 9a2b
0007d6 982b
0007d7 918f
0007d8 b987
0007d9 918f
0007da b988                            LATCH_DEBUG_LIGHTS
0007db 776f                            CLEAR_ERROR_DEBUG_BIT
0007dc b188
0007dd 938f
0007de b187
0007df 938f
0007e0 ef8f
0007e1 b987
0007e2 b968
0007e3 9a2b
0007e4 982b
0007e5 918f
0007e6 b987
0007e7 918f
0007e8 b988                            LATCH_DEBUG_LIGHTS
                                 ;      push rTEMP
                                 ;      ldi rTEMP, 0
                                 ;      sts EIMSK, rTEMP
                                 ;      pop rTEMP
                                 ;      jmp RESET_vect
                                 ;      reti
                                 
0007e9 e061                            ldi rDEBUGBITS, 1
0007ea c041                            rjmp finish_interrupt
                                 
                                 INT1_vect:
0007eb e062                            ldi rDEBUGBITS, 2
0007ec c03f                            rjmp finish_interrupt
                                 
                                 INT2_vect:
0007ed e063                            ldi rDEBUGBITS, 3
0007ee c03d                            rjmp finish_interrupt
                                 
                                 PCINT0_vect:
0007ef e064                            ldi rDEBUGBITS, 4
0007f0 c03b                            rjmp finish_interrupt
                                 
                                 PCINT1_vect:
0007f1 e065                            ldi rDEBUGBITS, 5
0007f2 c039                            rjmp finish_interrupt
                                 
                                 PCINT2_vect:
0007f3 e066                            ldi rDEBUGBITS, 6
0007f4 c037                            rjmp finish_interrupt
                                 
                                 PCINT3_vect:
0007f5 e067                            ldi rDEBUGBITS, 7
0007f6 c035                            rjmp finish_interrupt
                                 
                                 WDT_vect:
0007f7 e068                            ldi rDEBUGBITS, 8
0007f8 c033                            rjmp finish_interrupt
                                 
                                 TIMER2_COMPA_vect:
0007f9 e069                            ldi rDEBUGBITS, 9
0007fa c031                            rjmp finish_interrupt
                                 
                                 TIMER2_COMPB_vect:
0007fb e06a                            ldi rDEBUGBITS, 10
0007fc c02f                            rjmp finish_interrupt
                                 
                                 TIMER2_OVF_vect:
0007fd e06b                            ldi rDEBUGBITS, 11
0007fe c02d                            rjmp finish_interrupt
                                 
                                 TIMER1_CAPT_vect:
0007ff e06c                            ldi rDEBUGBITS, 12
000800 c02b                            rjmp finish_interrupt
                                 
                                 TIMER1_COMPB_vect:
000801 e06e                            ldi rDEBUGBITS, 14
000802 c029                            rjmp finish_interrupt
                                 
                                 TIMER1_OVF_vect:
000803 e06f                            ldi rDEBUGBITS, 15
000804 c027                            rjmp finish_interrupt
                                 
                                 TIMER0_COMPA_vect:
000805 e160                            ldi rDEBUGBITS, 16
000806 c025                            rjmp finish_interrupt
                                 
                                 TIMER0_COMPB_vect:
000807 e161                            ldi rDEBUGBITS, 17
000808 c023                            rjmp finish_interrupt
                                 
                                 TIMER0_OVF_vect:
000809 e162                            ldi rDEBUGBITS, 18
00080a c021                            rjmp finish_interrupt
                                 
                                 SPI_STC_vect:
00080b e163                            ldi rDEBUGBITS, 19
00080c c01f                            rjmp finish_interrupt
                                 
                                 USART0_RX_vect:
00080d e164                            ldi rDEBUGBITS, 20
00080e c01d                            rjmp finish_interrupt
                                 
                                 USART0_UDRE_vect:
00080f e165                            ldi rDEBUGBITS, 21
000810 c01b                            rjmp finish_interrupt
                                 
                                 USART0_TX_vect:
000811 e166                            ldi rDEBUGBITS, 22
000812 c019                            rjmp finish_interrupt
                                 
                                 ANALOG_COMP_vect:
000813 e167                            ldi rDEBUGBITS, 23
000814 c017                            rjmp finish_interrupt
                                 
                                 ADC_vect:
000815 e168                            ldi rDEBUGBITS, 24
000816 c015                            rjmp finish_interrupt
                                 
                                 EE_READY_vect:
000817 e169                            ldi rDEBUGBITS, 25
000818 c013                            rjmp finish_interrupt
                                 
                                 TWI_vect:
000819 e16a                            ldi rDEBUGBITS, 26
00081a c011                            rjmp finish_interrupt
                                 
                                 SPM_READY_vect:
00081b e16b                            ldi rDEBUGBITS, 27
00081c c00f                            rjmp finish_interrupt
                                 
                                 USART1_RX_vect:
00081d e16c                            ldi rDEBUGBITS, 28
00081e c00d                            rjmp finish_interrupt
                                 
                                 USART1_UDRE_vect:
00081f e16d                            ldi rDEBUGBITS, 29
000820 c00b                            rjmp finish_interrupt
                                 
                                 USART1_TX_vect:
000821 e16e                            ldi rDEBUGBITS, 30
000822 c009                            rjmp finish_interrupt
                                 
                                 TIMER3_CAPT_vect:
000823 e16f                            ldi rDEBUGBITS, 31
000824 c007                            rjmp finish_interrupt
                                 
                                 TIMER3_COMPA_vect:
000825 e260                            ldi rDEBUGBITS, 32
000826 c005                            rjmp finish_interrupt
                                 
                                 TIMER3_COMPB_vect:
000827 e261                            ldi rDEBUGBITS, 33
000828 c003                            rjmp finish_interrupt
                                 
                                 TIMER3_OVF_vect:
000829 e262                            ldi rDEBUGBITS, 34
00082a c001                            rjmp finish_interrupt
                                 
                                 __vector_default:
00082b e060                            ldi rDEBUGBITS, 0
                                 
                                 finish_interrupt:
00082c 6860                            SET_ERROR_DEBUG_BIT
00082d b188
00082e 938f
00082f b187
000830 938f
000831 ef8f
000832 b987
000833 b968
000834 9a2b
000835 982b
000836 918f
000837 b987
000838 918f
000839 b988                            LATCH_DEBUG_LIGHTS
                                 ;      reti
                                 
                                 endless:
00083a cfff                            rjmp endless
                                 
                                 .DSEG
                                 
                                 ; PPU registers are in registers.inc = 256 bytes
                                 
000200                           tile_graphic_data:          .BYTE 4096          ; Tile data storage area = 4K (format depends on mode chosen)
                                                                                 ; Graphic data is stored in RAM as: offset + 00000YYY`TTTTTTTT
                                                                                 ; This makes it faster to access during the loop.
                                 
001200                           tile_grid:                  .BYTE 4096          ; Grid of 32x32 tiles = 32x32x32 bits maximum = 4K
                                                                                 ; For 2-color mode, the grid is stored as <TileNum> <BGColor> <FGColor>
                                                                                 ; For 4-color mode, the grid is stored as <TileNum> <Color1> <Color2> <Color3>
002200                           line_buffer_1:              .BYTE 256           ; Line buffer 1 = 256 bytes
002300                           line_buffer_2:              .BYTE 256           ; Line buffer 2 = 256 bytes
                                 
                                 ; Variables
002400                           tile_grid_offset:           .BYTE 2


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega1284P" register use summary:
x  : 217 y  :  15 z  :   5 r0 :   3 r1 :   5 r2 :   6 r3 :   2 r4 :   2 
r5 :   2 r6 :   3 r7 :   3 r8 :   1 r9 :   1 r10:  10 r11:  45 r12:  45 
r13: 120 r14:  13 r15:  21 r16:   4 r17:  13 r18:   8 r19:  10 r20:   3 
r21:   3 r22:  58 r23:  35 r24: 653 r25:  53 r26:  13 r27:  13 r28:   2 
r29:   2 r30:  14 r31:   6 
Registers used: 35 out of 35 (100.0%)

"ATmega1284P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :  11 adiw  :   1 and   :   1 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  25 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   2 cbi   :  53 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :  10 cpse  :   0 dec   :   9 elpm  :   0 eor   :  19 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   1 in    :  42 inc   :  14 
jmp   :  36 ld    : 183 ldd   :   0 ldi   : 162 lds   :   0 lpm   :   0 
lsl   :   1 lsr   :   3 mov   : 114 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   : 815 or    :   1 ori   :   6 out   : 278 
pop   :  24 push  :  24 rcall :   4 ret   :   6 reti  :   1 rjmp  :  61 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :  39 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :  40 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  54 std   :   0 
sts   :   5 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 38 out of 114 (33.3%)

"ATmega1284P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001076   4214      0   4214  131072   3.2%
[.dseg] 0x000100 0x002402      0   8962   8962   16384  54.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
