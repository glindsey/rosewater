
AVRASM ver. 2.2.7  C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm Fri Dec 29 14:25:16 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.203\avrasm\inc\m1284pdef.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(53): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(54): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc(3): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(55): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(5): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(6): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(56): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.2.203\avrasm\inc\m1284pdef.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(53): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(54): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/registers.inc(3): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(55): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(5): Including file 'C:\Users\greg\Documents\GitHub\rosewater\vangogh/constants.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh/vram.inc(6): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
C:\Users\greg\Documents\GitHub\rosewater\vangogh.asm(56): Including file 'C:\Users\greg\Documents\GitHub\rosewater\shared/utilities.inc'
                                 
                                 ; Notes
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega1284P.xml *********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m1284Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega1284P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega1284P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M1284PDEF_INC_
                                 #define _M1284PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega1284P
                                 #pragma AVRPART ADMIN PART_NAME ATmega1284P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x05
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	PCMSK3	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Timer/Counter3 Output Compare A Match Flag
                                 .equ	OCF3B	= 2	; Timer/Counter3 Output Compare B Match Flag
                                 .equ	ICF3	= 5	; Timer/Counter3 Input Capture Flag
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	WGM31	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	COM3B0	= 4	; Comparet Ouput Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode Bit 2
                                 .equ	WGM33	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for Channel A
                                 
                                 ; OCR3BH - Timer/Counter3 Output Compare Register B High Byte
                                 .equ	OCR3AH0	= 0	; Timer/Counter3 Output Compare Register High Byte bit 0
                                 .equ	OCR3AH1	= 1	; Timer/Counter3 Output Compare Register High Byte bit 1
                                 .equ	OCR3AH2	= 2	; Timer/Counter3 Output Compare Register High Byte bit 2
                                 .equ	OCR3AH3	= 3	; Timer/Counter3 Output Compare Register High Byte bit 3
                                 .equ	OCR3AH4	= 4	; Timer/Counter3 Output Compare Register High Byte bit 4
                                 .equ	OCR3AH5	= 5	; Timer/Counter3 Output Compare Register High Byte bit 5
                                 .equ	OCR3AH6	= 6	; Timer/Counter3 Output Compare Register High Byte bit 6
                                 .equ	OCR3AH7	= 7	; Timer/Counter3 Output Compare Register High Byte bit 7
                                 
                                 ; OCR3BL - Timer/Counter3 Output Compare Register B Low Byte
                                 .equ	OCR3AL0	= 0	; Timer/Counter3 Output Compare Register Low Byte Bit 0
                                 .equ	OCR3AL1	= 1	; Timer/Counter3 Output Compare Register Low Byte Bit 1
                                 .equ	OCR3AL2	= 2	; Timer/Counter3 Output Compare Register Low Byte Bit 2
                                 .equ	OCR3AL3	= 3	; Timer/Counter3 Output Compare Register Low Byte Bit 3
                                 .equ	OCR3AL4	= 4	; Timer/Counter3 Output Compare Register Low Byte Bit 4
                                 .equ	OCR3AL5	= 5	; Timer/Counter3 Output Compare Register Low Byte Bit 5
                                 .equ	OCR3AL6	= 6	; Timer/Counter3 Output Compare Register Low Byte Bit 6
                                 .equ	OCR3AL7	= 7	; Timer/Counter3 Output Compare Register Low Byte Bit 7
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 .equ	PCIE3	= 3	; Pin Change Interrupt Enable 3
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 .equ	PCIF3	= 3	; Pin Change Interrupt Flag 3
                                 
                                 ; PCMSK3 - Pin Change Mask Register 3
                                 .equ	PCINT24	= 0	; Pin Change Enable Mask 24
                                 .equ	PCINT25	= 1	; Pin Change Enable Mask 25
                                 .equ	PCINT26	= 2	; Pin Change Enable Mask 26
                                 .equ	PCINT27	= 3	; Pin Change Enable Mask 27
                                 .equ	PCINT28	= 4	; Pin Change Enable Mask 28
                                 .equ	PCINT29	= 5	; Pin Change Enable Mask 29
                                 .equ	PCINT30	= 6	; Pin Change Enable Mask 30
                                 .equ	PCINT31	= 7	; Pin Change Enable Mask 31
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 .equ	BODSE	= 5	; BOD Power Down in Sleep Enable
                                 .equ	BODS	= 6	; BOD Power Down in Sleep
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART 0
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRUSART1	= 4	; Power Reduction USART 1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRTIM3	= 0	; Power Reduction Timer/Counter3
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 16384
                                 .equ	RAMEND	= 0x40ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 16384
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	PCI0addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x000c	; Pin Change Interrupt Request 2
                                 .equ	PCI3addr	= 0x000e	; Pin Change Interrupt Request 3
                                 .equ	WDTaddr	= 0x0010	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x0012	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0014	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x0016	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0018	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x001a	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001c	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001e	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x0020	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x0022	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x0024	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0026	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0028	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x002a	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x002c	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	ADCCaddr	= 0x0030	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0032	; EEPROM Ready
                                 .equ	TWIaddr	= 0x0034	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0036	; Store Program Memory Read
                                 .equ	URXC1addr	= 0x0038	; USART1 RX complete
                                 .equ	UDRE1addr	= 0x003a	; USART1 Data Register Empty
                                 .equ	UTXC1addr	= 0x003c	; USART1 TX complete
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OVF3addr	= 0x0044	; Timer/Counter3 Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M1284PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Large Figlet font is "basic"
                                 ; Small Figlet font is "banner"
                                 
                                 .DEVICE ATmega1284P
                                 .CSEG
                                 .ORG 0x0000
000000 940c 0046                     jmp RESET_vect				; 0
000002 940c 075d                     jmp INT0_vect				; 1
000004 940c 077b                     jmp INT1_vect				; 2
000006 940c 077d                     jmp INT2_vect				; 3
000008 940c 077f                     jmp PCINT0_vect				; 4
00000a 940c 0781                     jmp PCINT1_vect				; 5
00000c 940c 0783                     jmp PCINT2_vect				; 6
00000e 940c 0785                     jmp PCINT3_vect				; 7
000010 940c 0787                     jmp WDT_vect				; 8
000012 940c 0789                     jmp TIMER2_COMPA_vect		; 9
000014 940c 078b                     jmp TIMER2_COMPB_vect		; 10
000016 940c 078d                     jmp TIMER2_OVF_vect			; 11
000018 940c 078f                     jmp TIMER1_CAPT_vect        ; 12
00001a 940c 0191                     jmp TIMER1_COMPA_vect		; 13
00001c 940c 0791                     jmp TIMER1_COMPB_vect		; 14
00001e 940c 0793                     jmp TIMER1_OVF_vect			; 15
000020 940c 0795                     jmp TIMER0_COMPA_vect		; 16
000022 940c 0797                     jmp TIMER0_COMPB_vect		; 17
000024 940c 0799                     jmp TIMER0_OVF_vect			; 18
000026 940c 079b                     jmp SPI_STC_vect			; 19
000028 940c 079d                     jmp USART0_RX_vect			; 20
00002a 940c 079f                     jmp USART0_UDRE_vect		; 21
00002c 940c 07a1                     jmp USART0_TX_vect			; 22
00002e 940c 07a3                     jmp ANALOG_COMP_vect		; 23
000030 940c 07a5                     jmp ADC_vect				; 24
000032 940c 07a7                     jmp EE_READY_vect			; 25
000034 940c 07a9                     jmp TWI_vect				; 26
000036 940c 07ab                     jmp SPM_READY_vect			; 27
000038 940c 07ad                     jmp USART1_RX_vect			; 28
00003a 940c 07af                     jmp USART1_UDRE_vect		; 29
00003c 940c 07b1                     jmp USART1_TX_vect			; 30
00003e 940c 07b3                     jmp TIMER3_CAPT_vect		; 31
000040 940c 07b5                     jmp TIMER3_COMPA_vect		; 32
000042 940c 07b7                     jmp TIMER3_COMPB_vect		; 33
000044 940c 07b9                     jmp TIMER3_OVF_vect			; 34
                                 
                                 RESET_vect:
000046 e400                          ldi r16, HIGH(RAMEND)
000047 bf0e                          out SPH, r16
000048 ef0f                          ldi r16, LOW(RAMEND)
000049 bf0d                          out SPL, r16
00004a 2411                          eor rZERO, rZERO
                                     ;sei
00004b 940c 00fc                     jmp main 
                                 
                                 #include "vangogh/constants.inc"
                                 
                                 #ifndef CONSTANTS_INC
                                 #define CONSTANTS_INC
                                 
                                 .EQU ADDRDDR   = DDRA
                                 .EQU ADDRPORT  = PORTA
                                 .EQU DATADDR   = DDRC
                                 .EQU DATAPORT  = PORTC
                                 .EQU CTRLDDR   = DDRD
                                 .EQU CTRLPORT  = PORTD
                                 .EQU CTL2DDR   = DDRB
                                 .EQU CTL2PORT  = PORTB
                                 
                                 .EQU STATBIT_DISP                =     7   ; Current line is a display line
                                 .EQU STATBIT_HSYNC               =     6   ; LOW indicates HSYNC active
                                 .EQU STATBIT_VSYNC               =     5   ; LOW indicates VSYNC active
                                 .EQU STATBIT_EVENFRAME           =     0   ; Current frame is an even frame
                                 .EQU STATBIT_DISP_MASK           = (0b10000000)
                                 .EQU STATBIT_EVENFRAME_MASK      = (0b00000001)
                                 .EQU NOT_STATBIT_DISP_MASK       = (0b01111111)
                                 .EQU NOT_STATBIT_EVENFRAME_MASK  = (0b11111110)
                                 
                                 ; === Bitmasks for Address Port =================
                                 .EQU ADDRBIT_PORT_INIT           = (0b11111111) ; testing, normally (0b00000000)
                                 .EQU ADDRBIT_DDR_INPUT           = (0b00000000)
                                 .EQU ADDRBIT_DDR_OUTPUT          = (0b11111111)
                                 .EQU ADDRBIT_DDR_INIT            = ADDRBIT_DDR_OUTPUT
                                 
                                 ; === Bitmasks for Data/High Address Port =======
                                 .EQU DATABIT_PORT_INIT           = (0b11111111)
                                 .EQU DATABIT_DDR_INPUT           = (0b00000000)
                                 .EQU DATABIT_DDR_OUTPUT          = (0b11111111)
                                 .EQU DATABIT_DDR_INIT            = DATABIT_DDR_INPUT
                                 
                                 ; === Bitmasks for Control Port =================
                                 .EQU CTRLBIT_PORT_INIT           = (0b00100000)
                                 .EQU CTRLBIT_DDR_INPUT           = (0b00000000)
                                 .EQU CTRLBIT_DDR_OUTPUT          = (0b11111111)
                                 .EQU CTRLBIT_DDR_INIT            = CTRLBIT_DDR_OUTPUT
                                 
                                 .EQU CTRLBIT_MASK                = (0b11111111)
                                 .EQU SYNCBIT_MASK                = (0b10000000)
                                 .EQU HALLATBIT_MASK              = (0b01000000)
                                 .EQU CPUDISBIT_MASK              = (0b00100000)
                                 .EQU VBLANKBIT_MASK              = (0b00010000)
                                 .EQU VDRAWBIT_MASK               = (0b00001000)
                                 .EQU EXTRAADDR_MASK              = (0b00000111)
                                 .EQU NOT_SYNCBIT_MASK            = (0b01111111)
                                 .EQU NOT_HALLATBIT_MASK          = (0b10111111)
                                 .EQU NOT_CPUDISBIT_MASK          = (0b11011111)
                                 .EQU NOT_VBLANKBIT_MASK          = (0b11101111)
                                 .EQU NOT_VDRAWBIT_MASK           = (0b11110111)
                                 .EQU NOT_EXTRAADDR_MASK          = (0b11111000)
                                 
                                 .EQU SYNCPIN    = 7
                                 .EQU HALLATPIN  = 6
                                 .EQU CPUDISPIN  = 5
                                 .EQU VBLANKPIN  = 4
                                 .EQU VDRAWPIN   = 3
                                 .EQU A18PIN     = 2
                                 .EQU A17PIN     = 1
                                 .EQU A16PIN     = 0
                                 
                                 ; === Bitmasks for Control Port 2 ===============
                                 .EQU CTL2BIT_PORT_INIT           = (0b11110111)
                                 .EQU CTL2BIT_DDR_INIT            = (0b00011111)
                                 
                                 .EQU CTL2BIT_MASK                = (0b00001111)
                                 .EQU ENABLEBIT_MASK              = (0b00000101)
                                 .EQU DACENBIT_MASK               = (0b00010000)
                                 .EQU DEBUGBIT_MASK               = (0b00001000)
                                 .EQU OEBIT_MASK                  = (0b00000100)
                                 .EQU CLOCKBIT_MASK               = (0b00000010)
                                 .EQU WEBIT_MASK                  = (0b00000001)
                                 
                                 .EQU NOT_ENABLEBIT_MASK          = (0b11111001)
                                 .EQU NOT_DACENBIT_MASK           = (0b11101111)
                                 .EQU NOT_DEBUGBIT_MASK           = (0b11110111)
                                 .EQU NOT_OEBIT_MASK              = (0b11111011)
                                 .EQU NOT_CLOCKBIT_MASK           = (0b11111101)
                                 .EQU NOT_WEBIT_MASK              = (0b11111110)
                                 
                                 .EQU DACENPIN                    = 4
                                 .EQU DEBUGPIN                    = 3
                                 .EQU OEPIN                       = 2
                                 .EQU CLOCKPIN                    = 1
                                 .EQU WEPIN                       = 0
                                 
                                 #endif
                                 #include "vangogh/registers.inc"
                                 
                                 #ifndef REGISTERS_INC
                                 #include "constants.inc"
                                 
                                 #ifndef CONSTANTS_INC
                                 #endif
                                 
                                 .EQU PPUREG_MODE = 0
                                 
                                 .EQU PPUREG_MODE_VRAM_DIRECT_6 = 0
                                 .EQU PPUREG_MODE_VRAM_DIRECT_5 = 1
                                 .EQU PPUREG_MODE_LINE_BUFFER   = 2
                                 
                                 .CSEG
                                 
                                 ; Loads data from a PPU register.
                                 ; Cycles: 7
                                 ; Inputs:
                                 ;   @0	CPU register to load into
                                 ;   @1	PPU register to load from (00 to FF)
                                 ; Outputs:
                                 ;   @0 contains the requested data from ppureg
                                 ; Clobbers:
                                 ;   X (r26/r27), rTEMP
                                 .MACRO LOAD_PPUREG
                                 ldi XL, LOW(ppu_registers)  ; [1]
                                 ldi XH, HIGH(ppu_registers) ; [1]
                                 ldi rTEMP, @1               ; [1]
                                 add XL, rTEMP               ; [1]
                                 adc XH, rZERO               ; [1]
                                 ld @0, X                    ; [2]
                                 .ENDM
                                 
                                 ; Saves data into a PPU register.
                                 ; Cycles:
                                 ; Inputs:
                                 ;   @0	PPU register to save into (00 to FF)
                                 ;   @1	CPU register to save from
                                 .MACRO SAVE_PPUREG
                                 ldi XL, LOW(ppu_registers)  ; [1]
                                 ldi XH, HIGH(ppu_registers) ; [1]
                                 ldi rTEMP, @0               ; [1]
                                 add XL, rTEMP               ; [1]
                                 adc XH, rZERO               ; [1]
                                 st X, @1                    ; [2]
                                 .ENDM
                                 
                                 .MACRO SAVE_PPUREG_IMM
                                 ldi XL, LOW(ppu_registers)  ; [1]
                                 ldi XH, HIGH(ppu_registers) ; [1]
                                 ldi rTEMP, @0               ; [1]
                                 ldi rTEMP2, @1              ; [1]
                                 add XL, rTEMP               ; [1]
                                 adc XH, rZERO               ; [1]
                                 st X, rTEMP2                ; [2]
                                 .ENDM
                                 
                                 ; Loads the PPU register address into X.
                                 ; Outputs:
                                 ;   X contains the address of PPU register data
                                 ; Clobbers:
                                 ;   X (r26/r27)
                                 .MACRO LOAD_PPUREG_ADDR
                                 ldi XL, LOW(ppu_registers)
                                 ldi XH, HIGH(ppu_registers)
                                 .ENDM
                                 
                                 ; Initializes the PPU registers to default values.
                                 init_ppu_registers:
00004d e0a0
00004e e0b1
00004f e000
000050 e012
000051 0fa0
000052 1db1
000053 931c                              SAVE_PPUREG_IMM PPUREG_MODE, PPUREG_MODE_LINE_BUFFER
000054 9508                              ret
                                 
                                 .DSEG
                                 .ORG 0x0100
                                 ppu_registers:
000100                           .BYTE 256
                                 
                                 #endif
                                 #include "vangogh/vram.inc"
                                 
                                 #ifndef VRAM_INC
                                 #define VRAM_INC
                                 
                                 #include "constants.inc"
                                 
                                 #ifndef CONSTANTS_INC
                                 #endif
                                 #include "shared/utilities.inc"
                                 
                                 #ifndef UTILITY_INC
                                 #define UTILITY_INC
                                 
                                 ; Universal Constant Definitions
                                 .DEF rCTEMP		= r0
                                 .DEF rZERO		= r1
                                 
                                 .DEF rTEMP		= r16
                                 .DEF rTEMP2		= r17
                                 .DEF rTEMP3		= r18
                                 
                                 ; Uses rTEMP to load an immediate into a low (r0-r15) register.
                                 ; @0 = register to load into
                                 ; @1 = value to load
                                 ; Cycles: 2
                                 ;
                                 .MACRO _LDI
                                       ldi rTEMP, @1
                                       mov @0, rTEMP
                                 .ENDM
                                 
                                 ; Uses rTEMP to compare a low (r0-r15) register with an immediate.
                                 ; @0 = register to compare
                                 ; @1 = value to compare against
                                 ; Cycles: 2
                                 ;
                                 .MACRO _CPI
                                       mov rTEMP, @0
                                       cpi rTEMP, @1
                                 .ENDM
                                 
                                 ; Various NOP slides.
                                 .MACRO _NOP2
                                 	nop
                                 	nop
                                 .ENDM
                                 
                                 .MACRO _NOP4
                                 	_NOP2
                                 	_NOP2
                                 .ENDM
                                 
                                 .MACRO _NOP8
                                 	_NOP4
                                 	_NOP4
                                 .ENDM
                                 
                                 .MACRO _NOP16
                                 	_NOP8
                                 	_NOP8
                                 .ENDM
                                 
                                 .MACRO _NOP32
                                 	_NOP16
                                 	_NOP16
                                 .ENDM
                                 
                                 .MACRO _NOP64
                                 	_NOP32
                                 	_NOP32
                                 .ENDM
                                 
                                 .MACRO _NOP128
                                 	_NOP64
                                 	_NOP64
                                 .ENDM
                                 
                                 .MACRO _NOP256
                                 	_NOP128
                                 	_NOP128
                                 .ENDM
                                 
                                 ; Jump using an offset in a jump table.
                                 ; @0 = address of jump table
                                 ; @1 = offset of jump address
                                 .MACRO JUMP_TO
                                 	ldi ZL, LOW(@0)
                                 	ldi ZH, HIGH(@0)
                                 	add ZL, @1
                                 	adc ZH, rZERO
                                 	ijmp
                                 .ENDM
                                 
                                 #endif
                                 
                                 .DEF rYPOS	= r12
                                 .DEF rXPOS  = r13
                                 
                                 .CSEG
                                 
                                 .MACRO OE_ON  ; 1 cycle
                                       cbi CTL2PORT, OEPIN
                                 .ENDM
                                 
                                 .MACRO OE_OFF  ; 1 cycle
                                       sbi CTL2PORT, OEPIN
                                 .ENDM
                                 
                                 .MACRO WE_ON  ; 1 cycle
                                       cbi CTL2PORT, WEPIN
                                 .ENDM
                                 
                                 .MACRO WE_OFF  ; 1 cycle
                                       sbi CTL2PORT, WEPIN
                                 .ENDM
                                 
                                 .MACRO OE_AND_WE_OFF  ; 2 cycles
                                       sbi CTL2PORT, OEPIN
                                       sbi CTL2PORT, WEPIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_VDU
                                       cbi CTRLPORT, A18PIN
                                       cbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_VRAM0
                                       cbi CTRLPORT, A18PIN
                                       sbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_VRAM1
                                       sbi CTRLPORT, A18PIN
                                       cbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 .MACRO ADDRESS_PALRAM
                                       sbi CTRLPORT, A18PIN
                                       sbi CTRLPORT, A17PIN
                                       cbi CTRLPORT, A16PIN
                                 .ENDM
                                 
                                 ; Sets data port to be an input.
                                 .MACRO SET_DATA_INPUT
                                       ldi rTEMP, DATABIT_DDR_INPUT
                                       out DATADDR, rTEMP
                                 .ENDM
                                 
                                 ; Sets data port to be an output.
                                 .MACRO SET_DATA_OUTPUT
                                       ldi rTEMP, DATABIT_DDR_OUTPUT
                                       out DATADDR, rTEMP
                                 .ENDM
                                 
                                 ; Reads from the data port into a high (r16-r31) register.
                                 .MACRO READ_DATA_INTO
                                       SET_DATA_INPUT
                                       OE_ON
                                       nop
                                       in @0, DATAPORT
                                       OE_OFF
                                 .ENDM
                                 
                                 ; Writes to the data port from a high (r16-r31) register.
                                 .MACRO WRITE_DATA_FROM
                                       SET_DATA_OUTPUT
                                       out DATAPORT, @0
                                       WE_ON
                                       nop
                                       WE_OFF
                                 .ENDM
                                 
                                 ; Sets the high address latch to the value in the specified register.
                                 ;
                                 ; Inputs:
                                 ;       @0     Register containing the value to set high address latch to
                                 ; Outputs:
                                 ;       none
                                 ; Clobbers:
                                 ;       rTEMP, rTEMP2, rTEMP3
                                 ; Timing:
                                 ;       9 cycles
                                 .MACRO SET_HAL
                                     in rTEMP, DATADDR
                                     in rTEMP2, DATAPORT
                                     ldi rTEMP3, DATABIT_DDR_OUTPUT
                                     out DATADDR, rTEMP3
                                     out DATAPORT, @0
                                     sbi CTRLPORT, HALLATPIN
                                     cbi CTRLPORT, HALLATPIN
                                     out DATAPORT, rTEMP2
                                     out DATADDR, rTEMP
                                 .ENDM
                                 
                                 setup_palette:
                                       ; Right now palette RAM high address is forced to 00.
                                 
                                       ; Set data lines to outputs.
000055 ef0f                            ldi rTEMP, DATABIT_DDR_OUTPUT
000056 b907                            out DATADDR, rTEMP
                                 
                                       ; Turn VDRAW off (by setting it high).
                                       ; It probably already is, but let's do it anyway.
000057 9a5b                            sbi CTRLPORT, VDRAWPIN
                                 
000058 9a5a
000059 9a59
00005a 9858                            ADDRESS_PALRAM
                                 
                                       ; Set high address latch to 0x80 (for high bytes).
00005b e800                            ldi rTEMP, 0x80
00005c b107
00005d b118
00005e ef2f
00005f b927
000060 b908
000061 9a5e
000062 985e
000063 b918
000064 b907                            SET_HAL rTEMP
                                 
                                       ; Loop through low addresses and set data = address for now.
000065 e000                            ldi rTEMP, 0
                                       ;ldi rTEMP2, 255
                                 
                                 palette_set_loop_low:
000066 950a                            dec rTEMP
000067 b902                            out ADDRPORT, rTEMP
000068 2f10                            mov rTEMP2, rTEMP
000069 b918                            out DATAPORT, rTEMP2
00006a 9828                            WE_ON
00006b 0000
00006c 0000
00006d 0000
00006e 0000                            _NOP4
00006f 9a28                            WE_OFF
000070 3000                            cpi rTEMP, 0
000071 f7a1                            brne palette_set_loop_low
                                 
                                       ; Set high address latch to 0x00 (for low bytes).
000072 e000                            ldi rTEMP, 0x00
000073 b107
000074 b118
000075 ef2f
000076 b927
000077 b908
000078 9a5e
000079 985e
00007a b918
00007b b907                            SET_HAL rTEMP
                                 
                                       ; Loop through low addresses and set data = address for now.
00007c e000                            ldi rTEMP, 0
                                       ;ldi rTEMP2, 255
                                 
                                 palette_set_loop_high:
00007d 950a                            dec rTEMP
00007e b902                            out ADDRPORT, rTEMP
00007f 2f10                            mov rTEMP2, rTEMP
000080 b918                            out DATAPORT, rTEMP2
000081 9828                            WE_ON
000082 0000
000083 0000
000084 0000
000085 0000                            _NOP4
000086 9a28                            WE_OFF
000087 3000                            cpi rTEMP, 0
000088 f7a1                            brne palette_set_loop_high
                                 
                                       ; Reset data lines back to inputs with pullups enabled.
000089 e000                            ldi rTEMP, DATABIT_DDR_INPUT
00008a b907                            out DATADDR, rTEMP
00008b ef0f                            ldi rTEMP, DATABIT_PORT_INIT
00008c b908                            out DATAPORT, rTEMP
                                 
00008d 985a
00008e 9859
00008f 9858                            ADDRESS_VDU
                                 
000090 9508                            ret
                                 
                                 ; Sets up VRAM with a test tartan pattern.
                                 setup_vram:
                                       ; Set data lines to outputs.
000091 ef0f                            ldi rTEMP, DATABIT_DDR_OUTPUT
000092 b907                            out DATADDR, rTEMP
                                 
000093 985a
000094 9a59
000095 9858                            ADDRESS_VRAM0
                                 
                                       ; Loop through high addresses, 255 to 0.
000096 e000
000097 2ec0                            _LDI rYPOS, 0
                                 
                                 vram_set_loop_y:
000098 94ca                            dec rYPOS
                                 
                                       ; Set high address latch to Y position.
000099 b107
00009a b118
00009b ef2f
00009c b927
00009d b8c8
00009e 9a5e
00009f 985e
0000a0 b918
0000a1 b907                            SET_HAL rYPOS
                                 
                                       ; Loop through low addresses and set data lines to make a tartan.
                                       ; = (xpos + ypos) >> 3 for now.
0000a2 e000
0000a3 2ed0                            _LDI rXPOS, 0
                                 
                                 vram_set_loop_x:
0000a4 94da                            dec rXPOS
0000a5 b8d2                            out ADDRPORT, rXPOS
0000a6 2d0d                            mov rTEMP, rXPOS
0000a7 0f00                            lsl rTEMP
0000a8 7f08                            andi rTEMP, 0xF8
0000a9 2d1c                            mov rTEMP2, rYPOS
0000aa 9516                            lsr rTEMP2
0000ab 9516                            lsr rTEMP2
0000ac 9516                            lsr rTEMP2
0000ad 7017                            andi rTEMP2, 0x07
0000ae 2b10                            or rTEMP2, rTEMP
0000af b918                            out DATAPORT, rTEMP2
0000b0 9828                            WE_ON
0000b1 0000
0000b2 0000
0000b3 0000
0000b4 0000                            _NOP4
0000b5 9a28                            WE_OFF
0000b6 2d0d
0000b7 3000                            _CPI rXPOS, 0
0000b8 f759                            brne vram_set_loop_x
                                 
0000b9 2d0c
0000ba 3000                            _CPI rYPOS, 0
0000bb f6e1                            brne vram_set_loop_y
                                 
                                       ; Reset data lines back to inputs with pullups enabled.
0000bc e000                            ldi rTEMP, DATABIT_DDR_INPUT
0000bd b907                            out DATADDR, rTEMP
0000be ef0f                            ldi rTEMP, DATABIT_PORT_INIT
0000bf b908                            out DATAPORT, rTEMP
                                 
0000c0 985a
0000c1 9859
0000c2 9858                            ADDRESS_VDU
                                 
0000c3 9508                            ret
                                 
                                 
                                 ; Zeroes out all VRAM -- both chips.
                                 clear_vram:
                                       ; Set data lines to outputs.
0000c4 ef0f                            ldi rTEMP, DATABIT_DDR_OUTPUT
0000c5 b907                            out DATADDR, rTEMP
                                 
0000c6 985a
0000c7 9a59
0000c8 9858                            ADDRESS_VRAM0
0000c9 d005                            rcall zero_loop
0000ca 9a5a
0000cb 9859
0000cc 9858                            ADDRESS_VRAM1
0000cd d001                            rcall zero_loop
                                 
0000ce 9508                            ret
                                 
                                 ; Zeroing loop called by clear_vram.
                                 zero_loop:
                                 
                                       ; Loop through high addresses, 255 to 0.
0000cf e000
0000d0 2ec0                            _LDI rYPOS, 0
                                 
                                 clear_loop_y:
0000d1 94ca                            dec rYPOS
                                 
                                       ; Set high address latch to Y position.
0000d2 b107
0000d3 b118
0000d4 ef2f
0000d5 b927
0000d6 b8c8
0000d7 9a5e
0000d8 985e
0000d9 b918
0000da b907                            SET_HAL rYPOS
                                 
0000db e000
0000dc 2ed0                            _LDI rXPOS, 0
                                 
                                 clear_loop_x:
0000dd 94da                            dec rXPOS
0000de b8d2                            out ADDRPORT, rXPOS
0000df e010                            ldi rTEMP2, 0
0000e0 b918                            out DATAPORT, rTEMP2
0000e1 9828                            WE_ON
0000e2 0000
0000e3 0000
0000e4 0000
0000e5 0000                            _NOP4
0000e6 9a28                            WE_OFF
0000e7 2d0d
0000e8 3000                            _CPI rXPOS, 0
0000e9 f799                            brne clear_loop_x
                                 
0000ea 2d0c
0000eb 3000                            _CPI rYPOS, 0
0000ec f721                            brne clear_loop_y
                                 
                                       ; Reset data lines back to inputs with pullups enabled.
0000ed e000                            ldi rTEMP, DATABIT_DDR_INPUT
0000ee b907                            out DATADDR, rTEMP
0000ef ef0f                            ldi rTEMP, DATABIT_PORT_INIT
0000f0 b908                            out DATAPORT, rTEMP
                                 
0000f1 985a
0000f2 9859
0000f3 9858                            ADDRESS_VDU
                                 
0000f4 9508                            ret
                                 
                                 #endif
                                 #include "shared/utilities.inc"
                                 
                                 #ifndef UTILITY_INC
                                 #endif
                                 
                                 ;d8888b. d88888b d88888b d888888b d8b   db d88888b .d8888.
                                 ;88  `8D 88'     88'       `88'   888o  88 88'     88'  YP
                                 ;88   88 88ooooo 88ooo      88    88V8o 88 88ooooo `8bo.
                                 ;88   88 88~~~~~ 88~~~      88    88 V8o88 88~~~~~   `Y8b.
                                 ;88  .8D 88.     88        .88.   88  V888 88.     db   8D
                                 ;Y8888D' Y88888P YP      Y888888P VP   V8P Y88888P `8888Y'
                                 
                                 ; Global macro definitions
                                 ; =========================================================
                                 .DEF rXMAX          = r14
                                 
                                 .DEF rLINECOUNTER	= r19
                                 .DEF rSTATBITS		= r20
                                 .DEF rCTRLBITS		= r21
                                 .DEF rADDRDDR		= r22
                                 .DEF rDATADDR		= r23
                                 .DEF rDEBUGBITS     = r24
                                 
                                 ; === Timing Values =============================
                                       ; At 20MHz:
                                       ; clkIO with OC=0x04F6 gives us 15.7356412 kHz
                                       ; At 19.9044MHz:
                                       ; clkIO with OC=0x04BC gives us 15.7414674 kHz
                                       ; At 21.47727MHz:
                                       ; clkIO with OC=0x0554 gives us 15.7342637 kHz
                                       ; (NTSC color line rate is 15.734 kHz).
                                       ; At 28.63636MHz:
                                       ; clkIO with OC=0x071B gives us 15.7342637 kHz
                                 .SET HSYNC_VALUE_HI		= 0x04
                                 .SET HSYNC_VALUE_LO		= 0xF6
                                 
                                 ;.88b  d88.  .d8b.   .o88b. d8888b.  .d88b.  .d8888.
                                 ;88'YbdP`88 d8' `8b d8P  Y8 88  `8D .8P  Y8. 88'  YP
                                 ;88  88  88 88ooo88 8P      88oobY' 88    88 `8bo.
                                 ;88  88  88 88~~~88 8b      88`8b   88    88   `Y8b.
                                 ;88  88  88 88   88 Y8b  d8 88 `88. `8b  d8' db   8D
                                 ;YP  YP  YP YP   YP  `Y88P' 88   YD  `Y88P'  `8888Y'
                                 
                                 .MACRO VBLANK_ON ; 1 cycle
                                       andi rCTRLBITS, NOT_VBLANKBIT_MASK
                                 .ENDM
                                 
                                 .MACRO VBLANK_OFF ; 1 cycle
                                       ori rCTRLBITS, VBLANKBIT_MASK
                                 .ENDM
                                 
                                 .MACRO VDRAW_ON ; 1 cycle
                                       andi rCTRLBITS, NOT_VDRAWBIT_MASK
                                 .ENDM
                                 
                                 .MACRO VDRAW_OFF ; 1 cycle
                                       ori rCTRLBITS, VDRAWBIT_MASK
                                 .ENDM
                                 
                                 .MACRO DEBUG_PULSE ; 2 cycles
                                       sbi CTL2PORT, DEBUGPIN
                                       cbi CTL2PORT, DEBUGPIN
                                 .ENDM
                                 
                                 .MACRO DAC_ENABLE  ; 1 cycle
                                       cbi CTL2PORT, DACENPIN
                                 .ENDM
                                 
                                 .MACRO DAC_DISABLE  ; 1 cycle
                                       sbi CTL2PORT, DACENPIN
                                 .ENDM
                                 
                                 .MACRO TOGGLE_SYNC_BIT  ; 2 cycles
                                       ldi rTEMP, SYNCBIT_MASK ; [1]
                                       eor rCTRLBITS, rTEMP    ; [1]
                                 .ENDM
                                 
                                 .MACRO IMMED_TOGGLE_SYNC_PIN ; 4 cycles
                                       in rTEMP, CTRLPORT            ; [1]
                                       ldi rTEMP2, SYNCBIT_MASK      ; [1]
                                       eor rTEMP, rTEMP2				; [1]
                                       out CTRLPORT, rTEMP			; [1]
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL
                                     ld rTEMP, X+
                                     out DATAPORT, rTEMP
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL2
                                     OUT_PIXEL
                                     OUT_PIXEL
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL4
                                     OUT_PIXEL2
                                     OUT_PIXEL2
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL8
                                     OUT_PIXEL4
                                     OUT_PIXEL4
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL16
                                     OUT_PIXEL8
                                     OUT_PIXEL8
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL32
                                     OUT_PIXEL16
                                     OUT_PIXEL16
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL64
                                     OUT_PIXEL32
                                     OUT_PIXEL32
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL128
                                     OUT_PIXEL64
                                     OUT_PIXEL64
                                 .ENDM
                                 
                                 .MACRO OUT_PIXEL256
                                     OUT_PIXEL128
                                     OUT_PIXEL128
                                 .ENDM
                                 
                                 ;.d8888. db    db d8888b. d8888b.  .d88b.  db    db d888888b d888888b d8b   db d88888b .d8888.
                                 ;88'  YP 88    88 88  `8D 88  `8D .8P  Y8. 88    88 `~~88~~'   `88'   888o  88 88'     88'  YP
                                 ;`8bo.   88    88 88oooY' 88oobY' 88    88 88    88    88       88    88V8o 88 88ooooo `8bo.
                                 ;  `Y8b. 88    88 88~~~b. 88`8b   88    88 88    88    88       88    88 V8o88 88~~~~~   `Y8b.
                                 ;db   8D 88b  d88 88   8D 88 `88. `8b  d8' 88b  d88    88      .88.   88  V888 88.     db   8D
                                 ;`8888Y' ~Y8888P' Y8888P' 88   YD  `Y88P'  ~Y8888P'    YP    Y888888P VP   V8P Y88888P `8888Y'
                                 
                                 boot_wait:
                                       ; A simple wait for RAM to stabilize before attempting writes.
0000f5 e001                            ldi rTEMP, 1
                                 boot_wait_outer_loop:
0000f6 e010                            ldi rTEMP2, 0
                                 boot_wait_inner_loop:
0000f7 951a                            dec rTEMP2
0000f8 f7f1                            brne boot_wait_inner_loop
0000f9 950a                            dec rTEMP
0000fa f7d9                            brne boot_wait_outer_loop
0000fb 9508                            ret
                                 
                                 ; Turn on the "interrupt" debug bit - 1 cycle
                                 .MACRO SET_INT_DEBUG_BIT
                                     ori rDEBUGBITS, 0x40
                                 .ENDM
                                       
                                 ; Turn off the "interrupt" debug bit - 1 cycle
                                 .MACRO CLEAR_INT_DEBUG_BIT
                                     andi rDEBUGBITS, 0xBF
                                 .ENDM
                                 
                                 ; Turn on the "error" debug bit.
                                 .MACRO SET_ERROR_DEBUG_BIT
                                     ori rDEBUGBITS, 0x80
                                 .ENDM
                                 
                                 ; Turn off the "error" debug bit.
                                 .MACRO CLEAR_ERROR_DEBUG_BIT
                                     andi rDEBUGBITS, 0x7f
                                 .ENDM
                                 
                                 ; Sets the debug output latch to the value in rDEBUGBITS - 16 cycles
                                 .MACRO LATCH_DEBUG_LIGHTS
                                     in rTEMP, DATAPORT
                                     push rTEMP
                                     in rTEMP, DATADDR
                                     push rTEMP
                                     SET_DATA_OUTPUT
                                     out DATAPORT, rDEBUGBITS
                                     DEBUG_PULSE
                                     pop rTEMP
                                     out DATADDR, rTEMP
                                     pop rTEMP
                                     out DATAPORT, rTEMP
                                 .ENDM
                                 
                                 main:
                                 
                                 ;.d8888. d88888b d888888b db    db d8888b.
                                 ;88'  YP 88'     `~~88~~' 88    88 88  `8D
                                 ;`8bo.   88ooooo    88    88    88 88oodD'
                                 ;  `Y8b. 88~~~~~    88    88    88 88~~~
                                 ;db   8D 88.        88    88b  d88 88
                                 ;`8888Y' Y88888P    YP    ~Y8888P' 88
                                 
                                     ; Disable interrupts.
0000fc 94f8                          cli
                                 
                                     ; This should be unneeded but putting it here anyway: disable INT0 interrupt
0000fd e000                          ldi rTEMP, 0
0000fe 9300 001d                     sts EIMSK, rTEMP
                                 
                                     ; === I/O Ports ========================================================
                                 
                                     ; Set up address port pins.
000100 ef6f                          ldi rADDRDDR, ADDRBIT_DDR_INIT
000101 b961                          out ADDRDDR, rADDRDDR
000102 ef0f                          ldi rTEMP, ADDRBIT_PORT_INIT
000103 b902                          out ADDRPORT, rTEMP
                                 
                                     ; Set up data port pins.
000104 e070                          ldi rDATADDR, DATABIT_DDR_INIT
000105 b977                          out DATADDR, rDATADDR
000106 ef0f                          ldi rTEMP, DATABIT_PORT_INIT
000107 b908                          out DATAPORT, rTEMP
                                 
                                     ; Set up control port 1 pins.
000108 ef0f                          ldi rTEMP, CTRLBIT_DDR_INIT
000109 b90a                          out CTRLDDR, rTEMP
00010a e200                          ldi rTEMP, CTRLBIT_PORT_INIT
00010b b90b                          out CTRLPORT, rTEMP
                                 
                                     ; Set up control port 2 pins.
00010c e10f                          ldi rTEMP, CTL2BIT_DDR_INIT
00010d b904                          out CTL2DDR, rTEMP
00010e ef07                          ldi rTEMP, CTL2BIT_PORT_INIT
00010f b905                          out CTL2PORT, rTEMP
                                 
000110 e080                          ldi rDEBUGBITS, 0x00
000111 b108
000112 930f
000113 b107
000114 930f
000115 ef0f
000116 b907
000117 b988
000118 9a2b
000119 982b
00011a 910f
00011b b907
00011c 910f
00011d b908                          LATCH_DEBUG_LIGHTS
                                 
00011e dfd6                          rcall boot_wait
                                 
                                     ; === Timers ===========================================================
                                 
                                     ; Set Timer 0 to toggle OC0A and clear on compare match.
                                     ;ldi rTEMP, (1 << COM0A0) | (1 << WGM01)
                                     ;sts _SFR_MEM_ADDR(TCCR0A), rTEMP
                                 
                                     ; Set OC1A to toggle on each output compare.
                                     ;ldi rTEMP, (1 << COM1A0)
                                     ;sts _SFR_MEM_ADDR(TCCR1A), rTEMP
                                 
                                     ; Set Timer 0 clock source to clkIO.
                                     ;ldi rTEMP, (1 << CS00)
                                     ;sts _SFR_MEM_ADDR(TCCR0B), rTEMP
                                 
                                     ; Set Timer 1 to clkIO and to clear on timer match.
00011f e009                          ldi rTEMP, (1 << WGM02) | (1 << CS10)
000120 9300 0081                     sts TCCR1B, rTEMP
                                 
                                     ; Set output compare value for OC0A
                                     ; 0x00 outputs a clock at half the AVR's frequency
                                     ;ldi rTEMP, 0x00
                                     ;sts _SFR_MEM_ADDR(OCR0A), rTEMP
                                 
                                     ; Set output compare value for OC1A
000122 e004                          ldi rTEMP, HSYNC_VALUE_HI
000123 9300 0089                     sts OCR1AH, rTEMP
000125 ef06                          ldi rTEMP, HSYNC_VALUE_LO
000126 9300 0088                     sts OCR1AL, rTEMP
                                 
                                     ; Set interrupt on OC1A compare
000128 e002                          ldi rTEMP, (1 << OCIE1A)
000129 9300 006f                     sts TIMSK1, rTEMP
                                 
00012b e081                          ldi rDEBUGBITS, 0x01
00012c b108
00012d 930f
00012e b107
00012f 930f
000130 ef0f
000131 b907
000132 b988
000133 9a2b
000134 982b
000135 910f
000136 b907
000137 910f
000138 b908                          LATCH_DEBUG_LIGHTS
                                 
                                     ; === RAM configuration ================================================
                                 
000139 dfbb                          rcall boot_wait
00013a e083                          ldi rDEBUGBITS, 0x03
00013b b108
00013c 930f
00013d b107
00013e 930f
00013f ef0f
000140 b907
000141 b988
000142 9a2b
000143 982b
000144 910f
000145 b907
000146 910f
000147 b908                          LATCH_DEBUG_LIGHTS
                                 
000148 940e 004d                     call init_ppu_registers
00014a e087                          ldi rDEBUGBITS, 0x07
00014b b108
00014c 930f
00014d b107
00014e 930f
00014f ef0f
000150 b907
000151 b988
000152 9a2b
000153 982b
000154 910f
000155 b907
000156 910f
000157 b908                          LATCH_DEBUG_LIGHTS
                                 
                                     ;call setup_palette
000158 2700                          eor rTEMP, rTEMP
000159 e2b2                          ldi XH, HIGH(line_buffer)
00015a e0a0                          ldi XL, LOW(line_buffer)
                                 line_buffer_set_loop:
00015b 930d                          st X+, rTEMP
00015c 9503                          inc rTEMP
00015d f7e9                          brne line_buffer_set_loop
00015e e08f                          ldi rDEBUGBITS, 0x0F
00015f b108
000160 930f
000161 b107
000162 930f
000163 ef0f
000164 b907
000165 b988
000166 9a2b
000167 982b
000168 910f
000169 b907
00016a 910f
00016b b908                          LATCH_DEBUG_LIGHTS
                                 
00016c 940e 0091                     call setup_vram
00016e e18f                          ldi rDEBUGBITS, 0x1F
00016f b108
000170 930f
000171 b107
000172 930f
000173 ef0f
000174 b907
000175 b988
000176 9a2b
000177 982b
000178 910f
000179 b907
00017a 910f
00017b b908                          LATCH_DEBUG_LIGHTS
                                 
                                     ; === Registers ========================================================
                                     ; Set up registers for line tracking.
00017c 2733                          eor rLINECOUNTER, rLINECOUNTER
00017d 2744                          eor rSTATBITS, rSTATBITS
                                 
                                     ; Set up control bits register.
00017e e250                          ldi rCTRLBITS, CTRLBIT_PORT_INIT
                                 
                                     ; EOR control bits register with SYNC bit, as the first thing the
                                     ; interrupt line should do is pull SYNC low.
00017f e800                          ldi rTEMP, SYNCBIT_MASK
000180 2750                          eor rCTRLBITS, rTEMP
                                 
000181 e38f                          ldi rDEBUGBITS, 0x3F
000182 b108
000183 930f
000184 b107
000185 930f
000186 ef0f
000187 b907
000188 b988
000189 9a2b
00018a 982b
00018b 910f
00018c b907
00018d 910f
00018e b908                          LATCH_DEBUG_LIGHTS
                                 
                                     ; Enable interrupts.
00018f 9478                          sei
                                 
                                 loop:
000190 cfff                          rjmp loop
                                 
                                 ;db   db .d8888. db    db d8b   db  .o88b.   d888888b .d8888. d8888b.
                                 ;88   88 88'  YP `8b  d8' 888o  88 d8P  Y8     `88'   88'  YP 88  `8D
                                 ;88ooo88 `8bo.    `8bd8'  88V8o 88 8P           88    `8bo.   88oobY'
                                 ;88~~~88   `Y8b.    88    88 V8o88 8b           88      `Y8b. 88`8b
                                 ;88   88 db   8D    88    88  V888 Y8b  d8     .88.   db   8D 88 `88.
                                 ;YP   YP `8888Y'    YP    VP   V8P  `Y88P'   Y888888P `8888Y' 88   YD
                                 
                                 TIMER1_COMPA_vect:
                                 
000191 6480                          SET_INT_DEBUG_BIT
000192 b108
000193 930f
000194 b107
000195 930f
000196 ef0f
000197 b907
000198 b988
000199 9a2b
00019a 982b
00019b 910f
00019c b907
00019d 910f
00019e b908                          LATCH_DEBUG_LIGHTS
00019f 7b8f                          CLEAR_INT_DEBUG_BIT
0001a0 b108
0001a1 930f
0001a2 b107
0001a3 930f
0001a4 ef0f
0001a5 b907
0001a6 b988
0001a7 9a2b
0001a8 982b
0001a9 910f
0001aa b907
0001ab 910f
0001ac b908                          LATCH_DEBUG_LIGHTS
                                 
                                     ; Start of front porch - 1.5 uS - 30 cycles
                                     ; Set control port lines as appropriate.
0001ad b95b                          out CTRLPORT, rCTRLBITS                 ; [030 -01 =029]
                                 
                                     ; Finish up front porch
0001ae 0000
0001af 0000
0001b0 0000
0001b1 0000
0001b2 0000
0001b3 0000
0001b4 0000
0001b5 0000
0001b6 0000
0001b7 0000
0001b8 0000
0001b9 0000
0001ba 0000
0001bb 0000
0001bc 0000
0001bd 0000                          _NOP16                                  ; [029 -16 =015]
0001be 0000
0001bf 0000
0001c0 0000
0001c1 0000
0001c2 0000
0001c3 0000
0001c4 0000
0001c5 0000                          _NOP8									; [015 -08 =007]
0001c6 0000
0001c7 0000                          _NOP2                                   ; [007 -02 =005]
0001c8 0000                          nop                                     ; [005 -01 =004]
                                 
0001c9 b10b
0001ca e810
0001cb 2701
0001cc b90b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                     ; Start of sync tip - 4.7uS - 94 cycles
                                 
0001cd ff47                          sbrs rSTATBITS, STATBIT_DISP            ; [094 -03 =091]
0001ce c524                          rjmp non_display_line                 
                                 
                                 display_line:
                                     ; 91 cycles of HSYNC left
0001cf 2ec3                          mov rYPOS, rLINECOUNTER                 ; [091 -01 =090]
0001d0 2f15                          mov rTEMP2, rCTRLBITS                   ; [090 -01 =089]
                                 
                                     ; Increment rLINECOUNTER by one.
0001d1 9533                          inc rLINECOUNTER                        ; [089 -01 =088]
                                 
0001d2 3f30                          cpi rLINECOUNTER, 240                   ; [088 -01 =087]
                                                                             ; [     ==     ] [     !=     ]
0001d3 f449                          brne skip_setup_vblank                  ; [087 -01 =086] [087 -02 =085]
                                 
                                 ;d888888b d8b   db d888888b d888888b   d8888b. db       .d8b.  d8b   db db   dD
                                 ;  `88'   888o  88   `88'   `~~88~~'   88  `8D 88      d8' `8b 888o  88 88 ,8P'
                                 ;   88    88V8o 88    88       88      88oooY' 88      88ooo88 88V8o 88 88,8P
                                 ;   88    88 V8o88    88       88      88~~~b. 88      88~~~88 88 V8o88 88`8b
                                 ;  .88.   88  V888   .88.      88      88   8D 88booo. 88   88 88  V888 88 `88.
                                 ;Y888888P VP   V8P Y888888P    YP      Y8888P' Y88888P YP   YP VP   V8P YP   YD
                                 
                                 setup_vblank:
                                     ; If result is 240:
                                     ;   - reset rLINECOUNTER to 0
0001d4 2733                          eor rLINECOUNTER, rLINECOUNTER          ; [086 -01 =085]
                                     ;   - clear rSTATBITS:DISP
0001d5 774f                          andi rSTATBITS, NOT_STATBIT_DISP_MASK   ; [085 -01 =084]
                                     ;   - toggle rSTATBITS:EVENFRAME
0001d6 e001                          ldi rTEMP, STATBIT_EVENFRAME_MASK       ; [084 -01 =083]
0001d7 2740                          eor rSTATBITS, rTEMP                    ; [083 -01 =082]
                                     ;   - turn on ~VBLANK control line
0001d8 7e5f                          VBLANK_ON                               ; [082 -01 =081]
                                     ;   - turn off ~VDRAW control line
0001d9 6058                          VDRAW_OFF                               ; [081 -01 =080]
                                     ;   - turn off OE/WE lines
0001da 9a2a
0001db 9a28                          OE_AND_WE_OFF                           ; [080 -01 =079]
0001dc c00a                          rjmp after_setup_vblank                 ; [079 -02 =077]
                                 
                                 skip_setup_vblank:
0001dd 0000
0001de 0000
0001df 0000
0001e0 0000
0001e1 0000
0001e2 0000
0001e3 0000
0001e4 0000                          _NOP8                                   ;                [087 -08 =079]
0001e5 0000
0001e6 0000                          _NOP2									;				 [079 -02 =077]
                                 
                                 after_setup_vblank:
                                 
                                     ; 77 cycles of HSYNC left
                                 
                                     ; Finish the H-sync pulse here.
                                 
                                     ; Load display mode from PPU register
0001e7 e0a0
0001e8 e0b1
0001e9 e000
0001ea 0fa0
0001eb 1db1
0001ec 900c                          LOAD_PPUREG   r0, PPUREG_MODE           ; [077 -07 =070]
                                 
                                     ; Ensure display mode only goes from 0 to 15 for now 
0001ed e00f                          ldi rTEMP, 0x0F                         ; [070 -01 =069]
0001ee 2200                          and r0, rTEMP                           ; [069 -01 =068]
                                 
                                     ; Load the jump address into Z but don't jump just yet
0001ef efe4                          ldi ZL, LOW(output_mode_jumptable)      ; [068 -01 =067]
0001f0 e0f1                          ldi ZH, HIGH(output_mode_jumptable)     ; [067 -01 =066]
0001f1 0de0                          add ZL, r0                              ; [066 -01 =065]
0001f2 1df1                          adc ZH, rZERO                           ; [065 -01 =064]
                                 
                                     ; ============================================================
                                     ; Start of breezeway/colorburst/back porch = 4.7uS = 94 cycles
                                     ; ============================================================
                                 
                                     ; Jump!
0001f3 9409                          ijmp                                    ; [094 -02 =092]
                                 
                                 output_mode_jumptable:
0001f4 c00f                          rjmp output_line_vram_direct_6      ; 0
0001f5 c0cc                          rjmp output_line_vram_direct_5      ; 1
0001f6 c188                          rjmp output_line_buffer             ; 2
0001f7 c4ba                          rjmp output_line_dummy              ; 3
0001f8 c4b9                          rjmp output_line_dummy              ; 4
0001f9 c4b8                          rjmp output_line_dummy              ; 5
0001fa c4b7                          rjmp output_line_dummy              ; 6
0001fb c4b6                          rjmp output_line_dummy              ; 7
0001fc c4b5                          rjmp output_line_dummy              ; 8
0001fd c4b4                          rjmp output_line_dummy              ; 9
0001fe c4b3                          rjmp output_line_dummy              ; A
0001ff c4b2                          rjmp output_line_dummy              ; B
000200 c4b1                          rjmp output_line_dummy              ; C
000201 c4b0                          rjmp output_line_dummy              ; D
000202 c4af                          rjmp output_line_dummy              ; E
000203 c4ae                          rjmp output_line_dummy              ; F
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;                                                                               ;
                                 ;    #    # #####    ##   #    #         #####  # #####  ######  ####  #####    ;
                                 ;    #    # #    #  #  #  ##  ##         #    # # #    # #      #    #   #      ;
                                 ;    #    # #    # #    # # ## #         #    # # #    # #####  #        #      ;
                                 ;    #    # #####  ###### #    #         #    # # #####  #      #        #      ;
                                 ;     #  #  #   #  #    # #    #         #    # # #   #  #      #    #   #      ;
                                 ;      ##   #    # #    # #    #         #####  # #    # ######  ####    #      ;
                                 ;                                #######                                        ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 output_line_vram_direct_6:
                                 
                                     ; 64 cycles left for sync pulse
                                     ; This can be filled in with whatever additional calculations we care to do.
000204 0000
000205 0000
000206 0000
000207 0000
000208 0000
000209 0000
00020a 0000
00020b 0000
00020c 0000
00020d 0000
00020e 0000
00020f 0000
000210 0000
000211 0000
000212 0000
000213 0000
000214 0000
000215 0000
000216 0000
000217 0000
000218 0000
000219 0000
00021a 0000
00021b 0000
00021c 0000
00021d 0000
00021e 0000
00021f 0000
000220 0000
000221 0000
000222 0000
000223 0000                          _NOP32                                  ; [064 -32 =032]
000224 0000
000225 0000
000226 0000
000227 0000
000228 0000
000229 0000
00022a 0000
00022b 0000
00022c 0000
00022d 0000
00022e 0000
00022f 0000
000230 0000
000231 0000
000232 0000
000233 0000                          _NOP16									; [032 -16 =016]
000234 0000
000235 0000
000236 0000
000237 0000
000238 0000
000239 0000
00023a 0000
00023b 0000                          _NOP8									; [016 -08 =008]
00023c 0000
00023d 0000
00023e 0000
00023f 0000                          _NOP4                                   ; [008 -04 =004]
                                 
000240 b10b
000241 e810
000242 2701
000243 b90b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                 
                                     ; 92 cycles of breezeway
000244 0000
000245 0000
000246 0000
000247 0000
000248 0000
000249 0000
00024a 0000
00024b 0000
00024c 0000
00024d 0000
00024e 0000
00024f 0000
000250 0000
000251 0000
000252 0000
000253 0000
000254 0000
000255 0000
000256 0000
000257 0000
000258 0000
000259 0000
00025a 0000
00025b 0000
00025c 0000
00025d 0000
00025e 0000
00025f 0000
000260 0000
000261 0000
000262 0000
000263 0000
000264 0000
000265 0000
000266 0000
000267 0000
000268 0000
000269 0000
00026a 0000
00026b 0000
00026c 0000
00026d 0000
00026e 0000
00026f 0000
000270 0000
000271 0000
000272 0000
000273 0000
000274 0000
000275 0000
000276 0000
000277 0000
000278 0000
000279 0000
00027a 0000
00027b 0000
00027c 0000
00027d 0000
00027e 0000
00027f 0000
000280 0000
000281 0000
000282 0000
000283 0000                          _NOP64      ; 92 - 64 = 28
000284 0000
000285 0000
000286 0000
000287 0000
000288 0000
000289 0000
00028a 0000
00028b 0000
00028c 0000
00028d 0000
00028e 0000
00028f 0000
000290 0000
000291 0000
000292 0000
000293 0000                          _NOP16      ; 28 - 16 = 12
000294 0000
000295 0000
000296 0000
000297 0000
000298 0000
000299 0000
00029a 0000
00029b 0000                          _NOP8       ; 12 -  8 =  4
00029c 0000
00029d 0000
00029e 0000
00029f 0000                          _NOP4       ;  4 -  4 =  0
                                 
                                     ; Start Left Border
0002a0 e000                          ldi rTEMP, 0x00
0002a1 b908                          out DATAPORT, rTEMP
0002a2 ef0f
0002a3 b907                          SET_DATA_OUTPUT
                                 
                                     ; Clear X position.
0002a4 24dd                          eor rXPOS, rXPOS
                                 
                                     ; Set HAL to Y position.
0002a5 b107
0002a6 b118
0002a7 ef2f
0002a8 b927
0002a9 b8c8
0002aa 9a5e
0002ab 985e
0002ac b918
0002ad b907                          SET_HAL rYPOS
                                 
                                     ; Set address port to X position.
0002ae b8d2                          out ADDRPORT, rXPOS
                                 
                                     ; Set max X position
0002af eb0c
0002b0 2ee0                          _LDI rXMAX, 188
                                 
                                     ; End Left Border
                                     ;_NOP 3
0002b1 e000
0002b2 b907                          SET_DATA_INPUT
                                 
                                     ; Set VRAM0 address enable.
0002b3 985a
0002b4 9a59
0002b5 9858                          ADDRESS_VRAM0
0002b6 982a                          OE_ON
0002b7 982c                          DAC_ENABLE
                                 
                                 pixel_loop_6:
                                     ; Cyc/Pixel Num/Line
                                     ; ========= ========
                                     ;         5      188
                                     ;         4      236
0002b8 b8d2                          out ADDRPORT, rXPOS       ; 1
0002b9 94d3                          inc rXPOS                 ; 1
0002ba 14de                          cp rXPOS, rXMAX           ; 1
0002bb f7e1                          brne pixel_loop_6         ; 2
                                 
0002bc 9a2c                          DAC_DISABLE
0002bd 9a2a                          OE_OFF
0002be 985a
0002bf 9859
0002c0 9858                          ADDRESS_VDU
                                 
0002c1 c49a                          rjmp end_line
                                 
                                 output_line_vram_direct_5:
                                 
                                     ; 64 cycles left for sync pulse
                                     ; This can be filled in with whatever additional calculations we care to do.
0002c2 0000
0002c3 0000
0002c4 0000
0002c5 0000
0002c6 0000
0002c7 0000
0002c8 0000
0002c9 0000
0002ca 0000
0002cb 0000
0002cc 0000
0002cd 0000
0002ce 0000
0002cf 0000
0002d0 0000
0002d1 0000
0002d2 0000
0002d3 0000
0002d4 0000
0002d5 0000
0002d6 0000
0002d7 0000
0002d8 0000
0002d9 0000
0002da 0000
0002db 0000
0002dc 0000
0002dd 0000
0002de 0000
0002df 0000
0002e0 0000
0002e1 0000                          _NOP32                                  ; [064 -32 =032]
0002e2 0000
0002e3 0000
0002e4 0000
0002e5 0000
0002e6 0000
0002e7 0000
0002e8 0000
0002e9 0000
0002ea 0000
0002eb 0000
0002ec 0000
0002ed 0000
0002ee 0000
0002ef 0000
0002f0 0000
0002f1 0000                          _NOP16									; [032 -16 =016]
0002f2 0000
0002f3 0000
0002f4 0000
0002f5 0000
0002f6 0000
0002f7 0000
0002f8 0000
0002f9 0000                          _NOP8									; [016 -08 =008]
0002fa 0000
0002fb 0000
0002fc 0000
0002fd 0000                          _NOP4                                   ; [008 -04 =004]
                                 
0002fe b10b
0002ff e810
000300 2701
000301 b90b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                 
                                     ; 92 cycles of breezeway
000302 0000
000303 0000
000304 0000
000305 0000
000306 0000
000307 0000
000308 0000
000309 0000
00030a 0000
00030b 0000
00030c 0000
00030d 0000
00030e 0000
00030f 0000
000310 0000
000311 0000
000312 0000
000313 0000
000314 0000
000315 0000
000316 0000
000317 0000
000318 0000
000319 0000
00031a 0000
00031b 0000
00031c 0000
00031d 0000
00031e 0000
00031f 0000
000320 0000
000321 0000
000322 0000
000323 0000
000324 0000
000325 0000
000326 0000
000327 0000
000328 0000
000329 0000
00032a 0000
00032b 0000
00032c 0000
00032d 0000
00032e 0000
00032f 0000
000330 0000
000331 0000
000332 0000
000333 0000
000334 0000
000335 0000
000336 0000
000337 0000
000338 0000
000339 0000
00033a 0000
00033b 0000
00033c 0000
00033d 0000
00033e 0000
00033f 0000
000340 0000
000341 0000                          _NOP64      ; 92 - 64 = 28
000342 0000
000343 0000
000344 0000
000345 0000
000346 0000
000347 0000
000348 0000
000349 0000
00034a 0000
00034b 0000
00034c 0000
00034d 0000
00034e 0000
00034f 0000
000350 0000
000351 0000                          _NOP16      ; 28 - 16 = 12
000352 0000
000353 0000
000354 0000
000355 0000
000356 0000
000357 0000
000358 0000
000359 0000                          _NOP8       ; 12 -  8 =  4
00035a 0000
00035b 0000
00035c 0000
00035d 0000                          _NOP4       ;  4 -  4 =  0
                                 
                                     ; Start Left Border
00035e e000                          ldi rTEMP, 0x00
00035f b908                          out DATAPORT, rTEMP
000360 ef0f
000361 b907                          SET_DATA_OUTPUT
000362 982c                          DAC_ENABLE
                                 
                                     ; Clear X position.
000363 24dd                          eor rXPOS, rXPOS
                                 
                                     ; Set HAL to Y position.
000364 b107
000365 b118
000366 ef2f
000367 b927
000368 b8c8
000369 9a5e
00036a 985e
00036b b918
00036c b907                          SET_HAL rYPOS
                                 
                                     ; Set address port to X position.
00036d b8d2                          out ADDRPORT, rXPOS
                                 
                                     ; Set max X position
00036e ee0c
00036f 2ed0                          _LDI rXPOS, 236
                                 
                                     ; End Left Border
                                     ;_NOP 40
000370 e000
000371 b907                          SET_DATA_INPUT
                                 
                                     ; Set VRAM0 address enable.
000372 985a
000373 9a59
000374 9858                          ADDRESS_VRAM0
000375 982a                          OE_ON
                                 
                                 pixel_loop_5:
000376 94da                          dec rXPOS
000377 b8d2                          out ADDRPORT, rXPOS
000378 f7e9                          brne pixel_loop_5
                                 
000379 9a2c                          DAC_DISABLE
00037a 9a2a                          OE_OFF
00037b 985a
00037c 9859
00037d 9858                          ADDRESS_VDU
                                 
00037e c3dd                          rjmp end_line
                                 
                                 output_line_buffer:
                                 
                                     ; 64 cycles left for sync pulse
00037f e000                          ldi rTEMP, 0x00                 ; -1 = 63
000380 b908                          out DATAPORT, rTEMP             ; -1 = 62
000381 ef0f
000382 b907                          SET_DATA_OUTPUT                 ; -2 = 60
                                 
                                     ; Load tile graphic address into r3:r2 registers.
                                     .DEF rTILEGRAFL = r2
                                     .DEF rTILEGRAFH = r3
000383 e0f2                          ldi ZH, HIGH(tile_graphic_data) ; -1 = 59
000384 e0e0                          ldi ZL, LOW(tile_graphic_data)  ; -1 = 58
000385 2e3f                          mov rTILEGRAFH, ZH              ; -1 = 57
000386 2e2e                          mov rTILEGRAFL, ZL              ; -1 = 56
                                 
                                     ; The line won't change during the loop, so add the line number to ZH now.
000387 2d0c                          mov rTEMP, rYPOS                ; -1 = 55
000388 7007                          andi rTEMP, 0x07                ; -1 = 54
000389 0ff0                          add ZH, rTEMP                   ; -1 = 53
                                 
                                     ; Load tile grid address into r5:r4 registers.
                                     .DEF rTILEGRIDL = r4
                                     .DEF rTILEGRIDH = r5
00038a e1b2                          ldi XH, HIGH(tile_grid)         ; -1 = 52
00038b e0a0                          ldi XL, LOW(tile_grid)          ; -1 = 51
00038c 2e5b                          mov rTILEGRIDH, XH              ; -1 = 50
00038d 2e4a                          mov rTILEGRIDL, XL              ; -1 = 49
                                 
                                     ; Load tile grid offset into Y register.
00038e e2b3                          ldi XH, HIGH(tile_grid_offset)  ; -1 = 48
00038f e0a0                          ldi XL, LOW(tile_grid_offset)   ; -1 = 47
000390 91dd                          ld YH, X+                       ; -2 = 45
000391 91cd                          ld YL, X+                       ; -2 = 43
                                 
                                     ; Add tile grid address to tile grid offset to get actual address.
000392 0dc4                          add YL, rTILEGRIDL              ; -1 = 42
000393 1dd5                          adc YH, rTILEGRIDH              ; -1 = 41
                                 
                                     ; Load line buffer address into X register.
000394 e2b2                          ldi XH, HIGH(line_buffer)       ; -1 = 40
000395 e0a0                          ldi XL, LOW(line_buffer)        ; -1 = 39
                                 
000396 0000
000397 0000
000398 0000
000399 0000
00039a 0000
00039b 0000
00039c 0000
00039d 0000
00039e 0000
00039f 0000
0003a0 0000
0003a1 0000
0003a2 0000
0003a3 0000
0003a4 0000
0003a5 0000
0003a6 0000
0003a7 0000
0003a8 0000
0003a9 0000
0003aa 0000
0003ab 0000
0003ac 0000
0003ad 0000
0003ae 0000
0003af 0000
0003b0 0000
0003b1 0000
0003b2 0000
0003b3 0000
0003b4 0000
0003b5 0000                          _NOP32                                  ; [039 -32 =007]
0003b6 0000
0003b7 0000                          _NOP2 									; [007 -02 =005]
0003b8 0000                          nop 									; [005 -01 =004]
                                 
0003b9 b10b
0003ba e810
0003bb 2701
0003bc b90b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                 
                                     ; 92 cycles of breezeway
                                     
                                     ; Start at tile 0.
                                     .DEF rTILEINDEX = r7
                                     .DEF rTILECOLOR = r8
                                     .DEF rTILEFG = r9
                                 
                                 .MACRO LOAD_8_PIXELS    ; 42 cycles... ouch.
                                     ; [YH:YL] points to the tile we want.
                                     ld rTILEINDEX, Y+               ; +2
                                     ld rTILECOLOR, Y+               ; +2
                                     ld rTILEFG, Y+                  ; +2
                                     addiw YH:YL, 1                  ; +1
                                     ; Graphic data is stored in RAM as: offset + 00000YYY`TTTTTTTT
                                     ; This makes it faster to access during the loop.
                                     mov ZL, rTILEGRAFL              ; +1
                                     add ZL, rTILEINDEX              ; +1
                                     ; Load 8 pixels of data into rTEMP.
                                     ld rTEMP, Z                     ; +1
                                     sbrc rTEMP, 7                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                     sbrc rTEMP, 6                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                     sbrc rTEMP, 5                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                     sbrc rTEMP, 4                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                     sbrc rTEMP, 3                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                     sbrc rTEMP, 2                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                     sbrc rTEMP, 1                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                     sbrc rTEMP, 0                   ; +2
                                     mov rTILECOLOR, rTILEFG         ; ...
                                     st rTILECOLOR, X+               ; +2
                                 .ENDM
                                 
                                 
0003bd 0000
0003be 0000
0003bf 0000
0003c0 0000
0003c1 0000
0003c2 0000
0003c3 0000
0003c4 0000
0003c5 0000
0003c6 0000
0003c7 0000
0003c8 0000
0003c9 0000
0003ca 0000
0003cb 0000
0003cc 0000
0003cd 0000
0003ce 0000
0003cf 0000
0003d0 0000
0003d1 0000
0003d2 0000
0003d3 0000
0003d4 0000
0003d5 0000
0003d6 0000
0003d7 0000
0003d8 0000
0003d9 0000
0003da 0000
0003db 0000
0003dc 0000
0003dd 0000
0003de 0000
0003df 0000
0003e0 0000
0003e1 0000
0003e2 0000
0003e3 0000
0003e4 0000
0003e5 0000
0003e6 0000
0003e7 0000
0003e8 0000
0003e9 0000
0003ea 0000
0003eb 0000
0003ec 0000
0003ed 0000
0003ee 0000
0003ef 0000
0003f0 0000
0003f1 0000
0003f2 0000
0003f3 0000
0003f4 0000
0003f5 0000
0003f6 0000
0003f7 0000
0003f8 0000
0003f9 0000
0003fa 0000
0003fb 0000
0003fc 0000                          _NOP64              ; 67 - 64 =  3
0003fd 0000
0003fe 0000                          _NOP2               ;  3 -  2 =  1
0003ff 0000                          nop                 ;  1 -  1 =  0
                                 
                                     ; 160 cycles of border to center pixels on screen.
000400 0000
000401 0000
000402 0000
000403 0000
000404 0000
000405 0000
000406 0000
000407 0000
000408 0000
000409 0000
00040a 0000
00040b 0000
00040c 0000
00040d 0000
00040e 0000
00040f 0000
000410 0000
000411 0000
000412 0000
000413 0000
000414 0000
000415 0000
000416 0000
000417 0000
000418 0000
000419 0000
00041a 0000
00041b 0000
00041c 0000
00041d 0000
00041e 0000
00041f 0000
000420 0000
000421 0000
000422 0000
000423 0000
000424 0000
000425 0000
000426 0000
000427 0000
000428 0000
000429 0000
00042a 0000
00042b 0000
00042c 0000
00042d 0000
00042e 0000
00042f 0000
000430 0000
000431 0000
000432 0000
000433 0000
000434 0000
000435 0000
000436 0000
000437 0000
000438 0000
000439 0000
00043a 0000
00043b 0000
00043c 0000
00043d 0000
00043e 0000
00043f 0000
000440 0000
000441 0000
000442 0000
000443 0000
000444 0000
000445 0000
000446 0000
000447 0000
000448 0000
000449 0000
00044a 0000
00044b 0000
00044c 0000
00044d 0000
00044e 0000
00044f 0000
000450 0000
000451 0000
000452 0000
000453 0000
000454 0000
000455 0000
000456 0000
000457 0000
000458 0000
000459 0000
00045a 0000
00045b 0000
00045c 0000
00045d 0000
00045e 0000
00045f 0000
000460 0000
000461 0000
000462 0000
000463 0000
000464 0000
000465 0000
000466 0000
000467 0000
000468 0000
000469 0000
00046a 0000
00046b 0000
00046c 0000
00046d 0000
00046e 0000
00046f 0000
000470 0000
000471 0000
000472 0000
000473 0000
000474 0000
000475 0000
000476 0000
000477 0000
000478 0000
000479 0000
00047a 0000
00047b 0000
00047c 0000
00047d 0000
00047e 0000
00047f 0000                          _NOP128
000480 0000
000481 0000
000482 0000
000483 0000
000484 0000
000485 0000
000486 0000
000487 0000
000488 0000
000489 0000
00048a 0000
00048b 0000
00048c 0000
00048d 0000
00048e 0000
00048f 0000
000490 0000
000491 0000
000492 0000
000493 0000
000494 0000
000495 0000
000496 0000
000497 0000
000498 0000
000499 0000
00049a 0000
00049b 0000
00049c 0000
00049d 0000
00049e 0000
00049f 0000                          _NOP32
                                 
                                     ; Output 256 pixels.
0004a0 982c                          DAC_ENABLE
0004a1 910d
0004a2 b908
0004a3 910d
0004a4 b908
0004a5 910d
0004a6 b908
0004a7 910d
0004a8 b908
0004a9 910d
0004aa b908
0004ab 910d
0004ac b908
0004ad 910d
0004ae b908
0004af 910d
0004b0 b908
0004b1 910d
0004b2 b908
0004b3 910d
0004b4 b908
0004b5 910d
0004b6 b908
0004b7 910d
0004b8 b908
0004b9 910d
0004ba b908
0004bb 910d
0004bc b908
0004bd 910d
0004be b908
0004bf 910d
0004c0 b908
0004c1 910d
0004c2 b908
0004c3 910d
0004c4 b908
0004c5 910d
0004c6 b908
0004c7 910d
0004c8 b908
0004c9 910d
0004ca b908
0004cb 910d
0004cc b908
0004cd 910d
0004ce b908
0004cf 910d
0004d0 b908
0004d1 910d
0004d2 b908
0004d3 910d
0004d4 b908
0004d5 910d
0004d6 b908
0004d7 910d
0004d8 b908
0004d9 910d
0004da b908
0004db 910d
0004dc b908
0004dd 910d
0004de b908
0004df 910d
0004e0 b908
0004e1 910d
0004e2 b908
0004e3 910d
0004e4 b908
0004e5 910d
0004e6 b908
0004e7 910d
0004e8 b908
0004e9 910d
0004ea b908
0004eb 910d
0004ec b908
0004ed 910d
0004ee b908
0004ef 910d
0004f0 b908
0004f1 910d
0004f2 b908
0004f3 910d
0004f4 b908
0004f5 910d
0004f6 b908
0004f7 910d
0004f8 b908
0004f9 910d
0004fa b908
0004fb 910d
0004fc b908
0004fd 910d
0004fe b908
0004ff 910d
000500 b908
000501 910d
000502 b908
000503 910d
000504 b908
000505 910d
000506 b908
000507 910d
000508 b908
000509 910d
00050a b908
00050b 910d
00050c b908
00050d 910d
00050e b908
00050f 910d
000510 b908
000511 910d
000512 b908
000513 910d
000514 b908
000515 910d
000516 b908
000517 910d
000518 b908
000519 910d
00051a b908
00051b 910d
00051c b908
00051d 910d
00051e b908
00051f 910d
000520 b908
000521 910d
000522 b908
000523 910d
000524 b908
000525 910d
000526 b908
000527 910d
000528 b908
000529 910d
00052a b908
00052b 910d
00052c b908
00052d 910d
00052e b908
00052f 910d
000530 b908
000531 910d
000532 b908
000533 910d
000534 b908
000535 910d
000536 b908
000537 910d
000538 b908
000539 910d
00053a b908
00053b 910d
00053c b908
00053d 910d
00053e b908
00053f 910d
000540 b908
000541 910d
000542 b908
000543 910d
000544 b908
000545 910d
000546 b908
000547 910d
000548 b908
000549 910d
00054a b908
00054b 910d
00054c b908
00054d 910d
00054e b908
00054f 910d
000550 b908
000551 910d
000552 b908
000553 910d
000554 b908
000555 910d
000556 b908
000557 910d
000558 b908
000559 910d
00055a b908
00055b 910d
00055c b908
00055d 910d
00055e b908
00055f 910d
000560 b908
000561 910d
000562 b908
000563 910d
000564 b908
000565 910d
000566 b908
000567 910d
000568 b908
000569 910d
00056a b908
00056b 910d
00056c b908
00056d 910d
00056e b908
00056f 910d
000570 b908
000571 910d
000572 b908
000573 910d
000574 b908
000575 910d
000576 b908
000577 910d
000578 b908
000579 910d
00057a b908
00057b 910d
00057c b908
00057d 910d
00057e b908
00057f 910d
000580 b908
000581 910d
000582 b908
000583 910d
000584 b908
000585 910d
000586 b908
000587 910d
000588 b908
000589 910d
00058a b908
00058b 910d
00058c b908
00058d 910d
00058e b908
00058f 910d
000590 b908
000591 910d
000592 b908
000593 910d
000594 b908
000595 910d
000596 b908
000597 910d
000598 b908
000599 910d
00059a b908
00059b 910d
00059c b908
00059d 910d
00059e b908
00059f 910d
0005a0 b908
0005a1 910d
0005a2 b908
0005a3 910d
0005a4 b908
0005a5 910d
0005a6 b908
0005a7 910d
0005a8 b908
0005a9 910d
0005aa b908
0005ab 910d
0005ac b908
0005ad 910d
0005ae b908
0005af 910d
0005b0 b908
0005b1 910d
0005b2 b908
0005b3 910d
0005b4 b908
0005b5 910d
0005b6 b908
0005b7 910d
0005b8 b908
0005b9 910d
0005ba b908
0005bb 910d
0005bc b908
0005bd 910d
0005be b908
0005bf 910d
0005c0 b908
0005c1 910d
0005c2 b908
0005c3 910d
0005c4 b908
0005c5 910d
0005c6 b908
0005c7 910d
0005c8 b908
0005c9 910d
0005ca b908
0005cb 910d
0005cc b908
0005cd 910d
0005ce b908
0005cf 910d
0005d0 b908
0005d1 910d
0005d2 b908
0005d3 910d
0005d4 b908
0005d5 910d
0005d6 b908
0005d7 910d
0005d8 b908
0005d9 910d
0005da b908
0005db 910d
0005dc b908
0005dd 910d
0005de b908
0005df 910d
0005e0 b908
0005e1 910d
0005e2 b908
0005e3 910d
0005e4 b908
0005e5 910d
0005e6 b908
0005e7 910d
0005e8 b908
0005e9 910d
0005ea b908
0005eb 910d
0005ec b908
0005ed 910d
0005ee b908
0005ef 910d
0005f0 b908
0005f1 910d
0005f2 b908
0005f3 910d
0005f4 b908
0005f5 910d
0005f6 b908
0005f7 910d
0005f8 b908
0005f9 910d
0005fa b908
0005fb 910d
0005fc b908
0005fd 910d
0005fe b908
0005ff 910d
000600 b908
000601 910d
000602 b908
000603 910d
000604 b908
000605 910d
000606 b908
000607 910d
000608 b908
000609 910d
00060a b908
00060b 910d
00060c b908
00060d 910d
00060e b908
00060f 910d
000610 b908
000611 910d
000612 b908
000613 910d
000614 b908
000615 910d
000616 b908
000617 910d
000618 b908
000619 910d
00061a b908
00061b 910d
00061c b908
00061d 910d
00061e b908
00061f 910d
000620 b908
000621 910d
000622 b908
000623 910d
000624 b908
000625 910d
000626 b908
000627 910d
000628 b908
000629 910d
00062a b908
00062b 910d
00062c b908
00062d 910d
00062e b908
00062f 910d
000630 b908
000631 910d
000632 b908
000633 910d
000634 b908
000635 910d
000636 b908
000637 910d
000638 b908
000639 910d
00063a b908
00063b 910d
00063c b908
00063d 910d
00063e b908
00063f 910d
000640 b908
000641 910d
000642 b908
000643 910d
000644 b908
000645 910d
000646 b908
000647 910d
000648 b908
000649 910d
00064a b908
00064b 910d
00064c b908
00064d 910d
00064e b908
00064f 910d
000650 b908
000651 910d
000652 b908
000653 910d
000654 b908
000655 910d
000656 b908
000657 910d
000658 b908
000659 910d
00065a b908
00065b 910d
00065c b908
00065d 910d
00065e b908
00065f 910d
000660 b908
000661 910d
000662 b908
000663 910d
000664 b908
000665 910d
000666 b908
000667 910d
000668 b908
000669 910d
00066a b908
00066b 910d
00066c b908
00066d 910d
00066e b908
00066f 910d
000670 b908
000671 910d
000672 b908
000673 910d
000674 b908
000675 910d
000676 b908
000677 910d
000678 b908
000679 910d
00067a b908
00067b 910d
00067c b908
00067d 910d
00067e b908
00067f 910d
000680 b908
000681 910d
000682 b908
000683 910d
000684 b908
000685 910d
000686 b908
000687 910d
000688 b908
000689 910d
00068a b908
00068b 910d
00068c b908
00068d 910d
00068e b908
00068f 910d
000690 b908
000691 910d
000692 b908
000693 910d
000694 b908
000695 910d
000696 b908
000697 910d
000698 b908
000699 910d
00069a b908
00069b 910d
00069c b908
00069d 910d
00069e b908
00069f 910d
0006a0 b908                          OUT_PIXEL256
0006a1 9a2c                          DAC_DISABLE
                                 
                                     ; Here we have 128 cycles to prepare the next line.
                                 
                                     ; Tiles are stored at tile_grid as a 32x32 grid -- so the location of one tile is at offset 000000YY YYYXXXXX.
0006a2 2fd3                          mov YH, rLINECOUNTER            ; -1 = 127
0006a3 e0c0                          ldi YL, 0                       ; -1 = 126
0006a4 95d6                          lsr YH                          ; -1 = 125  ; 0YYYYYYY 00000000
0006a5 95d6                          lsr YH                          ; -1 = 124  ; 00YYYYYY 00000000
0006a6 95d6                          lsr YH                          ; -1 = 123  ; 000YYYYY 00000000
0006a7 95d6                          lsr YH                          ; -1 = 122  
0006a8 95c7                          ror YL                          ; -1 = 121  ; 0000YYYY Y0000000
0006a9 95d6                          lsr YH                          ; -1 = 120  
0006aa 95c7                          ror YL                          ; -1 = 119  ; 00000YYY YY000000
0006ab 95d6                          lsr YH                          ; -1 = 118  
0006ac 95c7                          ror YL                          ; -1 = 117  ; 000000YY YYY00000
0006ad e2b3                          ldi XH, HIGH(tile_grid_offset)  ; -1 = 116
0006ae e0a0                          ldi XL, LOW(tile_grid_offset)   ; -1 = 115
0006af 93dd                          st X+, YH                       ; -2 = 113
0006b0 93cd                          st X+, YL                       ; -2 = 111
                                 
0006b1 c0aa                          rjmp end_line
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;                                         ;
                                 ;    #####  #    # #    # #    # #   #    ;
                                 ;    #    # #    # ##  ## ##  ##  # #     ;
                                 ;    #    # #    # # ## # # ## #   #      ;
                                 ;    #    # #    # #    # #    #   #      ;
                                 ;    #    # #    # #    # #    #   #      ;
                                 ;    #####   ####  #    # #    #   #      ;
                                 ;                                         ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 output_line_dummy:
                                 
                                     ; 64 cycles left for sync pulse
                                     ; This can be filled in with whatever additional calculations we care to do.
0006b2 0000
0006b3 0000
0006b4 0000
0006b5 0000
0006b6 0000
0006b7 0000
0006b8 0000
0006b9 0000
0006ba 0000
0006bb 0000
0006bc 0000
0006bd 0000
0006be 0000
0006bf 0000
0006c0 0000
0006c1 0000
0006c2 0000
0006c3 0000
0006c4 0000
0006c5 0000
0006c6 0000
0006c7 0000
0006c8 0000
0006c9 0000
0006ca 0000
0006cb 0000
0006cc 0000
0006cd 0000
0006ce 0000
0006cf 0000
0006d0 0000
0006d1 0000                          _NOP32                                  ; [064 -32 =032]
0006d2 0000
0006d3 0000
0006d4 0000
0006d5 0000
0006d6 0000
0006d7 0000
0006d8 0000
0006d9 0000
0006da 0000
0006db 0000
0006dc 0000
0006dd 0000
0006de 0000
0006df 0000
0006e0 0000
0006e1 0000                          _NOP16									; [032 -16 =016]
0006e2 0000
0006e3 0000
0006e4 0000
0006e5 0000
0006e6 0000
0006e7 0000
0006e8 0000
0006e9 0000                          _NOP8									; [016 -08 =008]
0006ea 0000
0006eb 0000
0006ec 0000
0006ed 0000                          _NOP4                                   ; [008 -04 =004]
                                 
0006ee b10b
0006ef e810
0006f0 2701
0006f1 b90b                          IMMED_TOGGLE_SYNC_PIN                   ; [004 -04 =000]
                                 
0006f2 c069                          rjmp end_line
                                 
                                 ;d8888b. db       .d8b.  d8b   db db   dD d888888b d8b   db  d888b
                                 ;88  `8D 88      d8' `8b 888o  88 88 ,8P'   `88'   888o  88 88' Y8b
                                 ;88oooY' 88      88ooo88 88V8o 88 88,8P      88    88V8o 88 88
                                 ;88~~~b. 88      88~~~88 88 V8o88 88`8b      88    88 V8o88 88  ooo
                                 ;88   8D 88booo. 88   88 88  V888 88 `88.   .88.   88  V888 88. ~8~
                                 ;Y8888P' Y88888P YP   YP VP   V8P YP   YD Y888888P VP   V8P  Y888P
                                 
                                 non_display_line:
                                     ; 91 cycles of HSYNC left
                                 
                                     ; Of the 22 OR 23 non-display lines:
                                     ; 00-01: Bottom border lines
                                     ; 02-04: Pre-render blanking lines
                                     ; 05-07: VSYNC lines
                                     ; 08-21: Post-render blanking lines
                                     ; 22: Post-render blanking line on ODD frames only
                                 
                                     ; Load the jump address into Z but don't jump just yet
                                 ;    ldi ZL, LOW(non_display_line_table)       ; [091 -01 =090]
                                 ;    ldi ZH, HIGH(non_display_line_table)      ; [090 -01 =089]
                                 ;    add ZL, rLINECOUNTER                      ; [089 -01 =088]
                                 ;    adc ZH, rZERO                             ; [088 -01 =087]
0006f3 0000
0006f4 0000
0006f5 0000
0006f6 0000                          _NOP4 ; TEMPORARY
                                 
                                     ; If this is line 04, toggle SYNC for the next line.
0006f7 3034                          cpi rLINECOUNTER, 4                       ; [087 -01 =086]
                                                                             ; [     ==     ] [     !=     ]
0006f8 f419                          brne skip_set_vsync                       ; [086 -01 =085] [086 -02 =084]
                                 set_vsync:
0006f9 e800
0006fa 2750                          TOGGLE_SYNC_BIT                           ; [085 -02 =083]
0006fb c003                          rjmp after_set_vsync                      ; [083 -02 =081]
                                 skip_set_vsync:
0006fc 0000
0006fd 0000                          _NOP2                                     ;                [084 -02 =082]
0006fe 0000                          nop										;				 [082 -01 =081]
                                 after_set_vsync:
                                 
                                     ; If this is line 07, toggle SYNC for the next line.
0006ff 3037                          cpi rLINECOUNTER, 7                       ; [081 -01 =080]
                                                                             ; [     ==     ] [     !=     ]
000700 f419                          brne skip_clear_vsync                     ; [080 -01 =079] [080 -02 =078]
                                 clear_vsync:
000701 e800
000702 2750                          TOGGLE_SYNC_BIT                           ; [079 -02 =077]
000703 c003                          rjmp after_clear_vsync                    ; [077 -02 =075]
                                 skip_clear_vsync:
000704 0000
000705 0000                          _NOP2                                     ;                [078 -02 =076]
000706 0000                          nop										;				 [076 -01 =075]
                                 after_clear_vsync:
                                 
                                     ; Increment rLINECOUNTER by one.
000707 9533                          inc rLINECOUNTER                          ; [075 -01 =074]
                                 
                                     ; Load 22 into the temp register.
000708 e106                          ldi rTEMP, 22                             ; [074 -01 =073]
                                 
                                     ; If rSTATBITS:EVENFRAME is clear, add 1 to the temp register.
000709 ff40                          sbrs rSTATBITS, STATBIT_EVENFRAME         ; [073 -02 =071]
00070a 9503                          inc rTEMP
                                 
                                     ; If line counter is equal to temp register:
                                     ;   - reset to 0
                                     ;   - set rSTATBITS:DISP for next line
                                     ;   - set ~VBLANK control line
                                     ;   - set DATA lines to input (we ONLY do output when writing)
                                     ;   - set ADDR/CTL2 lines to outputs
                                     ;   - clear ~OE, ~WE bits
                                     ;   - clear ~VDRAW control line if rSTATBITS:EVENFRAME is clear
00070b 1730                          cp rLINECOUNTER, rTEMP                    ; [071 -01 =070]
                                                                             ; [     ==     ] [     !=     ]
00070c f451                          brne skip_setup_display                   ; [070 -01 =069] [070 -02 =068]
                                 
                                 ;d888888b d8b   db d888888b d888888b   d8888b. d888888b .d8888. d8888b.
                                 ;  `88'   888o  88   `88'   `~~88~~'   88  `8D   `88'   88'  YP 88  `8D
                                 ;   88    88V8o 88    88       88      88   88    88    `8bo.   88oodD'
                                 ;   88    88 V8o88    88       88      88   88    88      `Y8b. 88~~~
                                 ;  .88.   88  V888   .88.      88      88  .8D   .88.   db   8D 88
                                 ;Y888888P VP   V8P Y888888P    YP      Y8888D' Y888888P `8888Y' 88
                                 
                                 setup_display:
00070d 2733                          eor rLINECOUNTER, rLINECOUNTER            ; [069 -01 =068]
00070e 6840                          ori rSTATBITS, STATBIT_DISP_MASK          ; [068 -01 =067]
00070f 6150                          ori rCTRLBITS, VBLANKBIT_MASK             ; [067 -01 =066]
000710 ef6f                          ldi rADDRDDR, ADDRBIT_DDR_OUTPUT          ; [066 -01 =065]
000711 e070                          ldi rDATADDR, DATABIT_DDR_INPUT           ; [065 -01 =064]
000712 9a2a
000713 9a28                          OE_AND_WE_OFF                             ; [064 -02 =062]
000714 ff40                          sbrs rSTATBITS, STATBIT_EVENFRAME         ; [062 -02 =060]
000715 7f57                          andi rCTRLBITS, NOT_VDRAWBIT_MASK
000716 c00a                          rjmp after_setup_display                  ; [060 -02 =058]
                                 skip_setup_display:
000717 0000
000718 0000
000719 0000
00071a 0000
00071b 0000
00071c 0000
00071d 0000
00071e 0000                          _NOP8                                     ;                [068 -08 =060]
00071f 0000
000720 0000                          _NOP2                                     ;                [060 -02 =058]
                                 after_setup_display:
                                 
                                     ; Finish the H-sync pulse here.
                                     ; This can be filled in with whatever calculations we care to do.
000721 0000
000722 0000
000723 0000
000724 0000
000725 0000
000726 0000
000727 0000
000728 0000
000729 0000
00072a 0000
00072b 0000
00072c 0000
00072d 0000
00072e 0000
00072f 0000
000730 0000
000731 0000
000732 0000
000733 0000
000734 0000
000735 0000
000736 0000
000737 0000
000738 0000
000739 0000
00073a 0000
00073b 0000
00073c 0000
00073d 0000
00073e 0000
00073f 0000
000740 0000                          _NOP32									; [058 -32 =026]
000741 0000
000742 0000
000743 0000
000744 0000
000745 0000
000746 0000
000747 0000
000748 0000
000749 0000
00074a 0000
00074b 0000
00074c 0000
00074d 0000
00074e 0000
00074f 0000
000750 0000                          _NOP16                                    ; [026 -16 =010]
000751 0000
000752 0000
000753 0000
000754 0000                          _NOP4                                     ; [010 -04 =006]
000755 0000
000756 0000                          _NOP2                                     ; [006 -02 =004]
000757 b10b
000758 e810
000759 2701
00075a b90b                          IMMED_TOGGLE_SYNC_PIN                     ; [004 -04 =000]
                                 
                                     ; continue here if not a display line
00075b c000                          rjmp end_line ; -- TEMPORARY
                                 
                                 ;    ; Jump based on exactly which line this is
                                 ;    ijmp                                      ; [2]
                                 ;
                                 ;non_display_line_table:                         ; [2] for one of below jumps
                                 ;    rjmp bottom_border_line             ; 0
                                 ;    rjmp bottom_border_line             ; 1
                                 ;    rjmp pre_render_blanking_line       ; 2
                                 ;    rjmp pre_render_blanking_line       ; 3
                                 ;    rjmp pre_render_blanking_line       ; 4
                                 ;    rjmp vsync_line                     ; 5
                                 ;    rjmp vsync_line                     ; 6
                                 ;    rjmp vsync_line                     ; 7
                                 ;    rjmp post_render_blanking_line      ; 8
                                 ;    rjmp post_render_blanking_line      ; 9
                                 ;    rjmp post_render_blanking_line      ; 10
                                 ;    rjmp post_render_blanking_line      ; 11
                                 ;    rjmp post_render_blanking_line      ; 12
                                 ;    rjmp post_render_blanking_line      ; 13
                                 ;    rjmp post_render_blanking_line      ; 14
                                 ;    rjmp post_render_blanking_line      ; 15
                                 ;    rjmp post_render_blanking_line      ; 16
                                 ;    rjmp post_render_blanking_line      ; 17
                                 ;    rjmp post_render_blanking_line      ; 18
                                 ;    rjmp post_render_blanking_line      ; 19
                                 ;    rjmp post_render_blanking_line      ; 20
                                 ;    rjmp post_render_blanking_line      ; 21
                                 ;    rjmp post_render_blanking_line      ; 22 (for odd frames)
                                 ;
                                 ;    ; +4 cycles after HSYNC here (for whichever branch is taken)
                                 ;bottom_border_line:
                                 ;pre_render_blanking_line:
                                 ;vsync_line:
                                 ;post_render_blanking_line:
                                 ;
                                 ;    rjmp end_line                       ; [2]
                                 
                                 end_line:
00075c 9518                          reti
                                 
                                 INT0_vect:
00075d 6880                            SET_ERROR_DEBUG_BIT
00075e b108
00075f 930f
000760 b107
000761 930f
000762 ef0f
000763 b907
000764 b988
000765 9a2b
000766 982b
000767 910f
000768 b907
000769 910f
00076a b908                            LATCH_DEBUG_LIGHTS
00076b 778f                            CLEAR_ERROR_DEBUG_BIT
00076c b108
00076d 930f
00076e b107
00076f 930f
000770 ef0f
000771 b907
000772 b988
000773 9a2b
000774 982b
000775 910f
000776 b907
000777 910f
000778 b908                            LATCH_DEBUG_LIGHTS
                                 ;      push rTEMP
                                 ;      ldi rTEMP, 0
                                 ;      sts EIMSK, rTEMP
                                 ;      pop rTEMP
                                 ;      jmp RESET_vect
                                 ;      reti
                                 
000779 e081                            ldi rDEBUGBITS, 1
00077a c041                            rjmp finish_interrupt
                                 
                                 INT1_vect:
00077b e082                            ldi rDEBUGBITS, 2
00077c c03f                            rjmp finish_interrupt
                                 
                                 INT2_vect:
00077d e083                            ldi rDEBUGBITS, 3
00077e c03d                            rjmp finish_interrupt
                                 
                                 PCINT0_vect:
00077f e084                            ldi rDEBUGBITS, 4
000780 c03b                            rjmp finish_interrupt
                                 
                                 PCINT1_vect:
000781 e085                            ldi rDEBUGBITS, 5
000782 c039                            rjmp finish_interrupt
                                 
                                 PCINT2_vect:
000783 e086                            ldi rDEBUGBITS, 6
000784 c037                            rjmp finish_interrupt
                                 
                                 PCINT3_vect:
000785 e087                            ldi rDEBUGBITS, 7
000786 c035                            rjmp finish_interrupt
                                 
                                 WDT_vect:
000787 e088                            ldi rDEBUGBITS, 8
000788 c033                            rjmp finish_interrupt
                                 
                                 TIMER2_COMPA_vect:
000789 e089                            ldi rDEBUGBITS, 9
00078a c031                            rjmp finish_interrupt
                                 
                                 TIMER2_COMPB_vect:
00078b e08a                            ldi rDEBUGBITS, 10
00078c c02f                            rjmp finish_interrupt
                                 
                                 TIMER2_OVF_vect:
00078d e08b                            ldi rDEBUGBITS, 11
00078e c02d                            rjmp finish_interrupt
                                 
                                 TIMER1_CAPT_vect:
00078f e08c                            ldi rDEBUGBITS, 12
000790 c02b                            rjmp finish_interrupt
                                 
                                 TIMER1_COMPB_vect:
000791 e08e                            ldi rDEBUGBITS, 14
000792 c029                            rjmp finish_interrupt
                                 
                                 TIMER1_OVF_vect:
000793 e08f                            ldi rDEBUGBITS, 15
000794 c027                            rjmp finish_interrupt
                                 
                                 TIMER0_COMPA_vect:
000795 e180                            ldi rDEBUGBITS, 16
000796 c025                            rjmp finish_interrupt
                                 
                                 TIMER0_COMPB_vect:
000797 e181                            ldi rDEBUGBITS, 17
000798 c023                            rjmp finish_interrupt
                                 
                                 TIMER0_OVF_vect:
000799 e182                            ldi rDEBUGBITS, 18
00079a c021                            rjmp finish_interrupt
                                 
                                 SPI_STC_vect:
00079b e183                            ldi rDEBUGBITS, 19
00079c c01f                            rjmp finish_interrupt
                                 
                                 USART0_RX_vect:
00079d e184                            ldi rDEBUGBITS, 20
00079e c01d                            rjmp finish_interrupt
                                 
                                 USART0_UDRE_vect:
00079f e185                            ldi rDEBUGBITS, 21
0007a0 c01b                            rjmp finish_interrupt
                                 
                                 USART0_TX_vect:
0007a1 e186                            ldi rDEBUGBITS, 22
0007a2 c019                            rjmp finish_interrupt
                                 
                                 ANALOG_COMP_vect:
0007a3 e187                            ldi rDEBUGBITS, 23
0007a4 c017                            rjmp finish_interrupt
                                 
                                 ADC_vect:
0007a5 e188                            ldi rDEBUGBITS, 24
0007a6 c015                            rjmp finish_interrupt
                                 
                                 EE_READY_vect:
0007a7 e189                            ldi rDEBUGBITS, 25
0007a8 c013                            rjmp finish_interrupt
                                 
                                 TWI_vect:
0007a9 e18a                            ldi rDEBUGBITS, 26
0007aa c011                            rjmp finish_interrupt
                                 
                                 SPM_READY_vect:
0007ab e18b                            ldi rDEBUGBITS, 27
0007ac c00f                            rjmp finish_interrupt
                                 
                                 USART1_RX_vect:
0007ad e18c                            ldi rDEBUGBITS, 28
0007ae c00d                            rjmp finish_interrupt
                                 
                                 USART1_UDRE_vect:
0007af e18d                            ldi rDEBUGBITS, 29
0007b0 c00b                            rjmp finish_interrupt
                                 
                                 USART1_TX_vect:
0007b1 e18e                            ldi rDEBUGBITS, 30
0007b2 c009                            rjmp finish_interrupt
                                 
                                 TIMER3_CAPT_vect:
0007b3 e18f                            ldi rDEBUGBITS, 31
0007b4 c007                            rjmp finish_interrupt
                                 
                                 TIMER3_COMPA_vect:
0007b5 e280                            ldi rDEBUGBITS, 32
0007b6 c005                            rjmp finish_interrupt
                                 
                                 TIMER3_COMPB_vect:
0007b7 e281                            ldi rDEBUGBITS, 33
0007b8 c003                            rjmp finish_interrupt
                                 
                                 TIMER3_OVF_vect:
0007b9 e282                            ldi rDEBUGBITS, 34
0007ba c001                            rjmp finish_interrupt
                                 
                                 __vector_default:
0007bb e080                            ldi rDEBUGBITS, 0
                                 
                                 finish_interrupt:
0007bc 6880                            SET_ERROR_DEBUG_BIT
0007bd b108
0007be 930f
0007bf b107
0007c0 930f
0007c1 ef0f
0007c2 b907
0007c3 b988
0007c4 9a2b
0007c5 982b
0007c6 910f
0007c7 b907
0007c8 910f
0007c9 b908                            LATCH_DEBUG_LIGHTS
                                 ;      reti
                                 
                                 endless:
0007ca cfff                            rjmp endless
                                 
                                 .DSEG
                                 
                                 ; PPU registers are in registers.inc = 256 bytes
                                 
000200                           tile_graphic_data:      .BYTE 4096          ; Tile data storage area = 4K (format depends on mode chosen)
001200                           tile_grid:              .BYTE 4096          ; Grid of 32x32 tiles = 32x32x32 bits = 4K maximum
                                                                             ; For 2-color mode, the grid is stored as <TileNum> <BGColor> <FGColor> <Dummy>
                                                                             ; For 4-color mode, the grid is stored as <TileNum> <Color1> <Color2> <Color3>
002200                           line_buffer:            .BYTE 256           ; Line buffer (0200 to 02FF) = 256 bytes
                                 
                                 ; Variables


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega1284P" register use summary:
x  : 263 y  :   0 z  :   0 r0 :   3 r1 :   5 r2 :   1 r3 :   1 r4 :   2 
r5 :   2 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:  13 
r13:  21 r14:   2 r15:   0 r16: 786 r17:  42 r18:  12 r19:  14 r20:   8 
r21:  10 r22:   3 r23:   3 r24:  58 r25:   0 r26:  10 r27:  10 r28:   7 
r29:  10 r30:   4 r31:   5 
Registers used: 25 out of 35 (71.4%)

"ATmega1284P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :   5 adiw  :   0 and   :   1 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  15 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   2 cbi   :  53 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :   9 cpse  :   0 dec   :   9 elpm  :   0 eor   :  18 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   1 in    :  42 inc   :   5 
jmp   :  36 ld    : 259 ldd   :   0 ldi   : 141 lds   :   0 lpm   :   0 
lsl   :   1 lsr   :   9 mov   :  22 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   : 753 or    :   1 ori   :   6 out   : 374 
pop   :  24 push  :  24 rcall :   4 ret   :   6 reti  :   1 rjmp  :  61 
rol   :   0 ror   :   3 sbc   :   0 sbci  :   0 sbi   :  39 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 
sts   :   5 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 37 out of 114 (32.5%)

"ATmega1284P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f96   3990      0   3990  131072   3.0%
[.dseg] 0x000100 0x002302      0   8706   8706   16384  53.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
